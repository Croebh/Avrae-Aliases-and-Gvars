tembed 
<drac2>
# These are replaced with proper values from the base alias
args, defaults = argparse("@@@"),"&&&"

# Set are base variables
mapsize = defaults.get("size","10x10") or "10x10"
mapSplitX, mapSplitY = mapsize.lower().split('x')
mapX = min(int(mapSplitX) if mapSplitX.isdigit() else 10, 52) 
mapY = min(int(mapSplitY) if mapSplitY.isdigit() else 10, 52)
mapsize = f"{mapX}x{mapY}"
mapoptions = defaults.get("options","")
mapbg = defaults.get("background","")
mapinfo = ""
mapattach = ""
map="http://otfbm.com/"
out={}
col,siz,alph=("w","bk","gy","r","g","b","y","p","c","bn","o"), "TSMLHG", ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AA","BB","CC","DD","EE","FF","GG","HH","II","JJ","KK","LL","MM","NN","OO","PP","QQ","RR","SS","TT","UU","VV","WW","XX","YY","ZZ")
COL,SIZ = {"w": "white", "bk": "black", "gy": "grey", "r": "red", "g": "green", "b": "blue", "y": "yellow", "p": "purple", "c": "cyan", "bn": "brown", "o": "orange"},{"T":"Tiny", "S":"Small", "M":"Medium", "L":"Large", "H":"Huge", "G":"Gargantuan"}
overlays=[]
c = combat()
gt = c.get_combatant if c else None
debug = ""
desc = []
finalMap = ""
sizeOffset = {"T":0, "S":0, "M":0, "L":1, "H":1, "G":2}
# We don't have an aim point/target yet
aimPoint = ""
aimTarget = ""
targAimPoint = ""
targAimTarget = ""
aimStick = False
targPoint = ""
aim = ""
effect = None
effectName = ""
effectTarget =""
# F-Strings like to yell at me for \'s
newline, targD, aimD, quote = "\n", "{targ}", "{aim}", '\\"'
# What characters do we need to strip from names?
nameStrip = r"""'"()[]{}*?^%$#/-~“”‘’"""
</drac2>
<drac2>
# The default overlays, created by @Nerds and Dragons#2817 
defaultSpells = load_json(get_gvar("d456fdfa-a292-42a1-ab00-b884e79b702f"))
spellOverlays = defaultSpells.copy()
# Grab the user selected spells, and update the main dict
# This allows the user to replace/update items in the original dict
[spellOverlays.update(load_json(get_gvar(spells))) for spells in load_json(get('mapOverlays','{}')) if get_gvar(spells)]
# Iterate over the spell dict, making it a little easier to read.
# Only select the ones they are searching for, if they are searching
spelllist = [f"""**{spell}** - `{str(over).replace('"',quote)}`""" for spell, over in spellOverlays.items() if args.last('search','').lower() in spell.lower()]
# Split the list into groups of 20, to ensure it stays a reasonable size
spellPagin = [spelllist[i:i+20] for i in range(0, len(spelllist), 20)]
# Do we have a -spell#?
for overNum in [""]+[str(x) for x in range(1,11)]:
 if args.last('spell' + overNum):
  # Loop through our users spellOverlays, looking for that spell
  for spell in spellOverlays:
   if args.last('spell' + overNum).lower() in spell.lower():
    # If we find it, add the overlay to the args
    # If its a string, its just a `-over9`
    if typeof(spellOverlays.get(spell)) == "str":
     args = argparse(["-over" + overNum, spellOverlays.get(spell)] + "@@@")
    # If its a list, its starting with a -over9 and then theres other stuff
    elif typeof(spellOverlays.get(spell)) == "SafeList":
     adjustedList = [f"{x.strip('0123456789')}{overNum}" if x.startswith('-') else x for x in spellOverlays.get(spell)]
     args = argparse(["-over" + overNum] + adjustedList + "@@@")
    # We only care about the first result
    debug = args
    break
</drac2>
<drac2>
# If we're in combat, check all the things
if c:
 # Collect information on every combatant
 for combatant in combat().combatants:

  # Grab map information, if it exists
  for attack in combatant.attacks:
   if attack.name == 'map':
    mapattach=combatant
    mapinfo=attack.automation[0].text
</drac2>
<drac2>
if c:
 # If we found a `map` attack with information, parse it now
 if mapinfo:
  # Split and convert to dict. Couldn't use | here because of how -attack effects are parsed
  mapinfo=mapinfo.split(' ~ ')
  mapinfo={x[0].lower():x[1] for x in [item.split(': ') for item in mapinfo]}
  mapsize=mapinfo.get('size')
  mapSplitX, mapSplitY = mapsize.lower().split('x')
  mapX = min(int(mapSplitX) if mapSplitX.isdigit() else 10, 52) 
  mapY = min(int(mapSplitY) if mapSplitY.isdigit() else 10, 52)
  mapsize = f"{mapX}x{mapY}" 
  mapbg=mapinfo.get('background')
  mapoptions=mapinfo.get('options')
</drac2>
<drac2>
if c:
 # If theres a -mapsize, -mapbg, -mapoptions, or -mapattach arg, process that and add/replace the effect
 if args.last('mapsize') or args.last('mapbg') or args.last('mapoptions') or args.last('mapattach'):
  # Note to self: Should probably validate these arguments later
  # If the new mapsize is different from the old one, update and display
  if mapsize != args.last('mapsize', mapsize):
   mapSplitX, mapSplitY = args.last('mapsize', mapsize).lower().split('x')
   mapSplitX = min(int(mapSplitX) if mapSplitX.isdigit() else 10, 52) 
   mapSplitY = min(int(mapSplitY) if mapSplitY.isdigit() else 10, 52)
   mapsize = f"{mapSplitX}x{mapSplitY}" 
   desc.append(f"Map size changed to `{mapsize}`")
  # If the new mapbg is different from the old one, update and display
  if mapbg != args.last('mapbg', mapbg):
   mapbg = args.last('mapbg', mapbg)
   desc.append(f"Map background changed to `{mapbg}`")
  if mapoptions != args.last('mapoptions', mapoptions):
  # If the new mapoptions are different from the old ones, update and display
   mapoptions = args.last('mapoptions', mapoptions)
   desc.append(f"Map options changed to `{mapoptions}`")   
  # If there is a -mapattach, and its a valid target in init
  if args.last('mapattach') and gt(args.last('mapattach')):
   # First check if there is an existing mapattach, and if its the same as the new one, then remove their map effect
   if typeof(mapattach)=="SimpleCombatant" and gt(args.last('mapattach')).name != mapattach.name:
    mapattach.remove_effect('map')
   # Then, set the new mapattach
   mapattach = gt(args.last('mapattach'))
  # If theres mapattach set, and they currently have a map effect, remove it
  if mapattach and mapattach.get_effect('map'):
   mapattach.remove_effect('map')
  # Format everything appropriately
  neweffect = f"""{f"Size: {mapsize}" if mapsize else ""}{f" ~ Background: {mapbg}" if mapbg else ""}{f" ~ Options: {mapoptions}" if mapoptions else ""}""".strip(" ~")
  # If mapattach exists, apply the new effect, and display
  if mapattach:
   mapattach.add_effect('map', f"""-attack "||{neweffect}" """)
   desc.append(f"Map settings attached to `{mapattach.name}`")
  # Otherwise, show that it was changed, but not saved
  else:
   desc.append("Map settings changed, but no map attach target was found. Settings not saved.")
</drac2>
<drac2>
if c:
 # Read each combatants notes for their information
 for target in combat().combatants:
  # If they have a note, perse it into a dict
  if target.note:
   note=target.note
   note=note.split(" | ")
   note={x[0].lower():x[1] for x in [item.split(": ") for item in note]}
   out[target.name]=note
   # Check if we have any overlays attached to effects, and then if at effect exists
   for overNum in [""]+[str(x) for x in range(1,11)]:
    if out[target.name].get('effect'+overNum):
     checkEffect, checkEffectTarget = out[target.name].get('effect'+overNum).split(' / ')
     # If the effect (or the target it was on) are gone, remove the effect
     if not gt(checkEffectTarget) or not gt(checkEffectTarget).get_effect(checkEffect):
      _ = out[target.name].pop('effect'+overNum) if 'effect'+overNum in out[target.name] else None
      _ = out[target.name].pop('aim'+overNum) if 'aim'+overNum in out[target.name] else None
      _ = out[target.name].pop('overlay'+overNum) if 'overlay'+overNum in out[target.name] else None
      desc.append(f"Overlay {overNum} removed from {target.name} because effect {checkEffect} no longer present on {checkEffectTarget}")
</drac2>

<drac2>
# Lets back up our map each time we run it, why not
# This will back the entire `out` dictionary containing everyones positions and states
# to a uvar named mapState, with the current channels id appended. I.e `mapState712795723623694376`
# This way you won't accidentally overwrite your backup with the backup from another channel
prevBack = load_json(get('mapState'+chanid())) if get('mapState'+chanid()) else None
set_uvar("mapState"+chanid(), dump_json(out))
# Then, if we have an undo in the arguments, we'll grab that backup (if it exists)
# and replace out out dict with it. We do this after we set the backup, so we can undo the undo
if args.last('undo') and prevBack:
  out = prevBack
  desc.append("> **Reloaded backup from last time this user ran a map command. The state this erased has now been set as their new backup.**")
</drac2>

<drac2>
if c:
 # If there is a -t argument given, and that target exists as a combatant, modify that target
 if args.last('t', combat().me.name if combat().me else None) and gt(args.last('t', combat().me.name if combat().me else None)):
  targ=gt(args.last('t', combat().me.name if combat().me else None))
  # If they don't have a note/location set, add them to the list
  if not out.get(targ.name):
   out[targ.name] = {}
  # If there is a -size arg, change their size
  if args.last('size'):
   size=args.last('size')[0].upper()
   # Confirm that the given size is valid before updating
   if size in siz:
    out[targ.name].update({"size":f"{size} ({SIZ[size]})"})
    # Display the change in size
    desc.append(f"Changing size of {targ.name} to {SIZ[size]} ({size})")
   # If the size is None, erase the size, setting them back to Medium
   elif args.last('size') in (None,"None","none"):
    _ = out[targ.name].pop('size')
    # Display the change in size
    desc.append(f"Resetting size of {targ.name} to Medium (M)")
</drac2>
<drac2>
if c:
 # If there is a -t argument given, and that target exists as a combatant, modify that target
 if args.last('t', combat().me.name if combat().me else None) and gt(args.last('t', combat().me.name if combat().me else None)):
  # If there is a -color arg, change their color
  if args.last('color'):
   color = args.last('color').lower().strip('~') + " "
   color = color[:color.index(' ')]
   debug += f"`{color=}` {color in col}"
   # Confirm that the given color is valid before updating
   # Is it one of our preset colors?
   if color in col:
    out[targ.name].update({"color":f"{color} ({COL[color]})"})
    # Display the change in color
    desc.append(f"Changing color of {targ.name} to {COL[color]} ({color})")
   # Or is it a hex code
   elif len(color) in (3, 6) and not color.strip("abcdef1234567890"):
    out[targ.name].update({"color":f"#{color.upper()}"})
    # Display the change in color
    desc.append(f"Changing color of {targ.name} to #{color.upper()}")
   # If the color is None, erase the color, setting them back to black
   elif args.last('color') in ("None","none"):
    _ = out[targ.name].pop('color')
    # Display the change in color
    desc.append(f"Resetting color of {targ.name} to Black")
</drac2>
<drac2>
if c:
 # If there is a -t argument given, and that target exists as a combatant, modify that target
 if args.last('t', combat().me.name if combat().me else None) and gt(args.last('t', combat().me.name if combat().me else None)):
  # If there is a -height arg, change their height
  if args.last('height'):
   height = args.last('height')
   # If the height is none or 0, remove height from the target
   if height in ("None","none","0"):
    prevHeight = out[targ.name].pop('height')
    if prevHeight:
     desc.append(f"{targ.name} is no longer {['above','below'][int(prevHeight.strip(' ft.m'))<0] if prevHeight.strip(' -+ft.m').isdigit() else 'above'} everyone.")
   else:
    # Otherwise, set that targets height
    out[targ.name].update({'height':height})
</drac2>
<drac2>
if c:
 # If there is a -t argument given, and that target exists as a combatant, modify that target
 # If no -t, default to current character
 if args.last('t', combat().me.name if combat().me else None) and gt(args.last('t', combat().me.name if combat().me else None)):
  if args.last('move'):
   prevLoc = out[targ.name].get('location') 
   # Did they have a previous location? If so, lets calculate distance and draw a line
   if prevLoc:
    # Split previous location from XY to X and Y
    prevLocX = ''.join(x for x in prevLoc if x.isalpha())
    prevLocY = int(''.join(y for y in prevLoc if y.isdigit()))
    # Same as new location
    newLocX = ''.join(x.upper() for x in args.last('move') if x.isalpha())
    newLocY = int(''.join(y for y in args.last('move') if y.isdigit()))
    # Calculate the delta for X and Y between the two
    deltaX, deltaY = alph.index(prevLocX)-alph.index(newLocX), int(prevLocY)-int(newLocY)
    # Throw them in the pot with some pythag
    distanceT = int(round(sqrt((deltaX*deltaX)+(deltaY*deltaY)),0))*5
    # Otherwise, average the deltas
    deltaX, deltaY = deltaX if deltaX>=0 else deltaX*-1,deltaY if deltaY>=0 else deltaY*-1
    if deltaX and deltaY:
     distance = round(((deltaX+deltaY)/2)+0.000000000000001)*5
    elif deltaX:
     distance = deltaX*5
    else:
     distance = deltaY*5
    # Grab the targets new color if changed, old color if set, or default to dark violet
    colr = args.last('color', out[targ.name].get('color','p'))[0]
    # Add the line to the overlay list
    overlays.append(f"*a{distanceT}{colr}{prevLocX}{prevLocY}{newLocX}{newLocY}")
    # Display the change in location
    desc.insert(0, f"Moving {targ.name} from {prevLoc} to {args.last('move').upper()} ({f'~{distanceT}' if get('trueDistance') else distance} ft.).")
   else:
    # Display the change in location
    desc.insert(0, f"Moving {targ.name} to {args.last('move').upper()}.")
   out[targ.name].update({"location":args.last('move').upper()})
</drac2>
<drac2>
# Overlay stuff
if c:
  for overNum in [""]+[str(x) for x in range(1,11)]:
   # Is the user trying to set an overlay?
   if args.last('over'+overNum):
    # If we have a target, but our -over arg is none, we're trying to delete our overlay
    if args.last('t') and gt(args.last('t')) and (args.last('over'+overNum) in ("none", "None")):
     _ = out[targ.name].pop('overlay'+overNum) if 'overlay'+overNum in out[targ.name] else None
     _ = out[targ.name].pop('aim'+overNum) if 'aim'+overNum in out[targ.name] else None
     desc.append(f"Removed overlay{' '+overNum if overNum else ''} linked to {targ.name}")
    else: # Split the input by commas
     overlay = args.last('over'+overNum).split(',')
     # First argument is always the shape, so lets pop it out
     oShape = overlay.pop(0).lower()
     # Are we aiming at someone?
     if args.last('aim'+overNum):
      # Split our aim up, in case we have a |split
      aim = (args.last('aim'+overNum).split('|')+[""])[:2]
      aimStick = aim[1].lower() == "stick"
      # If the target is, well, a target, grab its location
      for target in out:
       if aim[0].lower() in target.lower():
        aimPoint = out[target]['location']
        # Is our target larger than medium? If so, we need to offset to adjust
        if out[target].get('size',"M")[0] in "LHG":
         aimOffset = sizeOffset.get(out[target].get('size',"M")[0])
         aimTargX = ''.join(x for x in aimPoint if x.isalpha())
         aimTargY = int(''.join(y for y in aimPoint if y.isdigit()))
         aimTargX = alph[alph.index(aimTargX)+aimOffset]
         aimTargY += aimOffset
         aimPoint = f"{aimTargX}{aimTargY}"
        aimTarget = target
      # If the target wasn't a target, it was coordinates. Use them.
      if not aimPoint:
       aimPoint = aim[0]
       aimTarget = aim[0].upper()

     # Are we attaching this to an effect?
     if args.last('effect'+overNum):
      # Split our effect up, in case we have a specified target
      effectName, effectTarget = (args.last('effect'+overNum).split('|')+[targ.name])[:2]
      effectTarget = gt(effectTarget)
      # Do we have a proper target, and does that target have our effect
      if effectTarget is not None and effectTarget.get_effect(effectName) is not None:
       effect = effectTarget.get_effect(effectName)
     
     # Our basic structure, pre laid out
     currentOver = {"shape": "", "size": "", "width": ",", "color": "", "colorDesc": "", "loc": "", "eloc": ""}

     # This has all the information we need for our overlay[
     shapeDict = [{"type": "circle",    "name":"c",  "num": [3], "args": ("size", "color", "loc")},
                  {"type": "circletop", "name":"ct", "num": [3], "args": ("size", "color", "loc")},
                  {"type": "cone",      "name":"t",  "num": [4], "args": ("size", "color", "loc", "eloc")},
                  {"type": "line",      "name":"l",  "num": [5], "args": ("size", "width", "color", "loc", "eloc")},
                  {"type": "arrow",     "name":"a",  "num": [3], "args": ("color", "loc", "eloc")},
                  {"type": "square",    "name":"s",  "num": [3,4], "args": ("size", "color", "loc", "eloc")},
                  {"type": "squaretop", "name":"st", "num": [3,4], "args": ("size", "color", "loc", "eloc")}]
     
     # Is the overlay valid?
     overValid = False

     # Did our user try to have the location linked to a target, but failed to supply a target?
     if "{targ}" in args.last('over'+overNum) and not (args.last('t') and gt(args.last('t'))):
      overlay = None
      desc.append(f"**Invalid overlay arguments.** {newline}Be sure to have a `-t`/`-aim{overNum}` if using `{targD}` and `{aimD}`")
     # Same for aiming it at something. If they failed to supply a -aim# 
     elif "{aim}" in args.last('over'+overNum) and not args.last('aim'+overNum):
      overlay = None
      desc.append(f"**Invalid overlay arguments.** {newline}Be sure to have a `-t`/`-aim{overNum}` if using `{targD}` and `{aimD}`")
     else:
      # Otherwise, lets loop through our possible overlays
      for shape in shapeDict:
       # Does it have a valid amount of arguments for the given shape?
       if oShape == shape.type and len(overlay) in shape.num:
        currentOver['shape'] = shape.name
        # Iterate over the needed args
        for index in range(len(overlay)):
         # If its a color, we need to account for both preset colors and hex codes
         if shape.args[index] == "color":
          overlaycolor = overlay[index].lower().strip('~') + " "
          overlaycolor = overlaycolor[:overlaycolor.index(' ')].strip()
          # If this is in our preset colors, use that
          if overlaycolor in col:
           currentOver[shape.args[index]] += overlaycolor
           currentOver['colorDesc'] += COL[overlaycolor]
          # Otherwise, check if its a hex code, either 3 or 6 digits
          elif len(overlaycolor) in (3, 6) and not overlaycolor.strip("abcdef1234567890"):
           currentOver[shape.args[index]] += f"~{overlaycolor}"
           currentOver['colorDesc'] += f"#{overlaycolor.upper()} colored"
         else:
          currentOver[shape.args[index]] += overlay[index]
        # Set the overlay for the map
        overlay = f"""*{currentOver.shape}{currentOver.size}{currentOver.width.rstrip(',')}{currentOver.color}{currentOver.loc}{currentOver.eloc}"""
        # Set the description (This is painfully long and I want to redo it)
        overdesc = f"""Creating a {currentOver.colorDesc} {shape.type} overlay{f", {currentOver.size} ft. " + ("radius" if shape.type in "circletop" else "long" if shape.type in "coneline" else "wide") if shape.type != "arrow" else ""}{f", positioned {'from the top left at' if shape.type == 'circletop' else 'at'} {currentOver.loc}" if shape.type not in ('line', 'arrow') else (f", {currentOver.width} ft. wide" if shape.type == "line" else "") + f", starting at {currentOver.loc}"}{f", {'aimed' if shape.type == 'arrow' else 'aimed'} at {aimTarget or currentOver.eloc.upper()}" if shape.type not in "circletop" and (aimTarget or currentOver.eloc) else ""}"""
        # If we made it this far, the overlay is valid, so we can break out of the loop
        overValid = True
        break
     if not overValid:
      overlay = None
     # If, after all the parsing above, we managed to get a proper overlay, continue
     if overlay:
      # Do we have a -aim? If so, replace {aim} with the aimPoint gathered before, and display who you're aiming at
      if aimPoint:
       overdesc = overdesc.replace('{aim}',aimPoint)
      # Are we attaching this overlay to a target?
      if args.last('t') and gt(args.last('t')):
       if not aimPoint or (aimPoint and aimStick):
        # If so, and no -aim (or -aim but also stick), lets attach it to the notes
        out[targ.name].update({"overlay"+overNum: overlay})
        if aimStick:
         out[targ.name].update({"aim"+overNum: aimTarget})
        if effect:
         out[effectTarget.name].update({f"effect{overNum}": f"{effect.name} / {effectTarget.name}"})
       else:
        # If so, and -aim, lets *not* attach it to the notes, and just display it once
        targPoint = out[targ.name].get('location','A1')
        # Is our target Large or bigger? If so, adjust accordingly
        if out[targ.name].get('size',"M")[0] in "LHG":
         targOffset = sizeOffset.get(out[targ.name].get('size',"M")[0])
         TargX = ''.join(x for x in targPoint if x.isalpha())
         TargY = int(''.join(y for y in targPoint if y.isdigit()))
         TargX = alph[alph.index(TargX)+targOffset]
         TargY += targOffset
         targPoint = f"{TargX}{TargY}"
        overlays.append(overlay.replace("{targ}", targPoint).replace("{aim}", aimPoint))
       desc.append(overdesc.replace('{targ}', out[targ.name].get('location','A1')) + f", linked to {gt(args.last('t')).name}")
      else: 
       # Otherwise, lets just display it once
       overlays.append(overlay)
       desc.append(overdesc)

</drac2>
<drac2>
if c:
 # Parse the collected notes and information into the format readable by otfbm.com
 people = []
 for target in out:
  tLocation = out[target].get('location')
  tSize = out[target].get('size','M')[0].upper()
  tColor = out[target].get('color', 'b' if '/' in gt(target).hp_str() else 'r') + " "
  tColor = tColor[:tColor.index(" ")].strip('#')
  # Account for hex colors
  if len(tColor) in (3, 6):
   tColor = f"~{tColor}".upper()
  tName = target.translate(str.maketrans(' ', '_', nameStrip))
  people.append(f"{tLocation}{tSize}{tColor}-{tName}")
  # Do they have a height set? If so, display it
  if out[target].get('height'):
   desc.append(f"{target} is currently {out[target].get('height').strip('-+')} ft. {['above','below'][int(out[target].get('height').strip(' ft.m'))<0] if out[target].get('height').strip(' -+ft.m').isdigit() else 'above'} everyone.")
  # Do they have overlays?
  for overNum in [""]+[str(x) for x in range(1,11)]:
    if out[target].get('overlay'+overNum):
     targPoint = out[target].get('location','A1')
     # Is our target Large or bigger? If so, adjust accordingly
     if out[target].get('size',"M")[0] in "LHG":
      targOffset = sizeOffset.get(out[target].get('size',"M")[0])
      TargX = ''.join(x for x in targPoint if x.isalpha())
      TargY = int(''.join(y for y in targPoint if y.isdigit()))
      TargX = alph[alph.index(TargX)+targOffset]
      TargY += targOffset
      targPoint = f"{TargX}{TargY}"
     # If the target has an aim point set
     if out[target].get('aim'+overNum):
      for aimTarget in out:
       # We need to check to see if they were targetting a... target
       if out[target].get('aim'+overNum).lower() in aimTarget.lower():
        targAimPoint = out[aimTarget]['location']
        # Is our aimTarget larger than medium? If so, we need to offset to adjust
        if out[aimTarget].get('size',"M")[0] in "LHG":
         targAimOffset = sizeOffset.get(out[aimTarget].get('size',"M")[0])
         targAimTargX = ''.join(x for x in targAimPoint if x.isalpha())
         targAimTargY = int(''.join(y for y in targAimPoint if y.isdigit()))
         targAimTargX = alph[alph.index(targAimTargX)+targAimOffset]
         targAimTargY += targAimOffset
         targAimPoint = f"{targAimTargX}{targAimTargY}"
       # If the aimTarget wasn't a target, it was coordinates. Use them.
       if not targAimPoint:
        targAimPoint = out[target].get('aim'+overNum).upper()
     # Add each targets overlay to the overlays list
     overlays.append(out[target].get('overlay'+overNum).replace("{targ}", targPoint).replace("{aim}", targAimPoint))
 # Reconvert all of our map information back into the readable note format
 dataout={x:' | '.join([f"{item[0].title()}: {item[1]}"for item in out[x].items()])for x in out}
 # Then set everyones note again. Kinda a chainsaw instead of a scalpal situation here.
 for target in dataout:
  gt(target).set_note(dataout[target])
 # If a 'clear' arg is given, clear the entire map (clears everyones notes)
 if args.last('clear'):
  [i.set_note(None)for i in combat().combatants]
  people=[]
 # Join everything together and display the map if we aren't displaying the help
 if not (args.get('?') or args.get('help') or args.get('spelllist')):
  finalMap = f"""{map}{mapsize}/{f"@{mapoptions}/"if mapoptions else""}{'/'.join(people+overlays)}{f"?bg={mapbg}" if mapbg else ""}"""
  return f"""-image "{finalMap}" -f "[Map]({finalMap})" """ + (f"""  -desc "{newline.join(desc)}"  """ if desc else "")
</drac2>

<drac2>
# Are we trying to display the spelllist?
if args.get('spelllist'):
 # Only grab the page selected, default to first
 spellPage = f"""-desc "{newline.join(spellPagin[ min(len(spellPagin),args.last('page', 1, int)-1)] )}" """
 # Add some pizazz
 return spellPage + f"""-title "Wait, how do you Spell that again?"
                        -f "Add your own overlays/spells| You can create a uvar (or cvar) named `mapOverlays` containing a list of gvars you or other created in order to add to or change the spells here. The format would be something like `[\"b5a2df67-58c9-4f1d-a240-8fc72a139953\", \"b5a2df67-58c9-4f1d-a240-8fc72a139953\"]`"
                        -f "`{targD}` and `{aimD}`| These will be replaced by the `-t` target and `-aim` target respectively."  """
# If we're not in combat, or "?" or "help" are given as arguments, display the help
elif not c or args.get('?') or args.get('help'):
 if args.get('overlay'):
  help = f"""-title "{["Bro","Broski","Brotein","Brosicle","Broseph","Brotastic","Han Brolo","Broba Fett","Brotato Chip","Broseidon","Brochacho","Broebh"][randint(12)]}, I'm so Over this!"
            -desc "**__Overlay Arguments__**
            `-over \"circle,<radius>,<color>,<center>\"` - Creates a circle of a given radius and color, centered at the chosen location
            `-over \"circletop,<radius>,<color>,<center>\"` - Same as circle, but you provide the top left coordinate instead of the center
            `-over \"cone,<size>,<color>,<start>,<end>\"` - Creates a cone/triangle of a given size and color, starting and aiming where you choose
            `-over \"line,<length>,<width>,<color>,<start>,<end>\"` - Creates a line of a given length, width, and color, starting and aiming where you choose
            `-over \"arrow,<color>,<start>,<end>\"` - Creates an arrow of a given color, starting and ending where you choose
            `-over \"square,<size>,<color>,<center>[,end]\"` - Creates a square of a given size and color, starting and,if you provide an end location, aiming where you choose. Pivot point is the center
            `-over \"squaretop,<size>,<color>,<center>[,end]\"` - Same as square, but the pivot point is the top left corner

            You can attach or display more than one overlay at a time by appending a number to the end of the `-over`/`-aim`/`-effect`/`-spell` args, for example `-over1` or `-aim9`. There is currently support for `-over` through till `-over9`, allowing 10 to be attached atno a time."

            -f "_ _|`-spell <spell>` - Grabs a 'spell' from your `mapOverlays` uvar, and adds it as an overlay. Many/most of the default ones contain `{targD}` or `{aimD}` to position and aim them. You can see a list of available overlays with `!map spelllist`.
            `-aim [target]` - Allows you to aim an overlay at a target. Use `{aimD}` in the `-over` command in order grab it. Works on both locations (A3) and targets (OR3). If a `-t` is provided as well, it won't attach the overlay to them.
            `-aim [target]|stick` - Same as above, but it *will* attach the overlay to a `-t` if provided, and will attach the `-aim` info as well.
            `-effect \"<effect>[|effectTarget]\"` - Allows you to 'connect' an overlay to an effect on a target. When the effect or target are no longer present, the overlay will be removed."

            -f "_ _|All of these overlays are displayed just once, unless there is a `-t` arg provided, in which case it will added to the targets notes. You can have the targets location be linked to the location of the overlay by using `{targD}`. 
            For example `-over circle,30,b,{targD} -t OR1` would cause it to be positioned on top of OR1, regardless of where they move. 
            If you have a valid `-aim`, it will only display the overlay once, because it doesn't track who you aimed, unless you used `-aim [target]|stick`
            To remove a linked overlay, run `-over none` with a `-t` selector.

            If your `-aim` or `-t` is a Large or bigger monster, the alias will do its best to adjust for the size difference."

            -f "Add your own overlays/spells| You can create a uvar (or cvar) named `mapOverlays` containing a list of gvars you or other created in order to add to or change the spells available in `-spell`. The format would be something like `[\"b5a2df67-58c9-4f1d-a240-8fc72a139953\", \"b5a2df67-58c9-4f1d-a240-8fc72a139953\"]`" """.replace(" "*11,"")
 else:
  help = f"""-title "Dude, where did I park my Tarrasque?"
            -desc "`!map` - View the map
            `!map [args]` - Edit the map, its combatants, or its overlays

            `!move [location]` - The `!move` alias allows you to quickly move your currently active character around. For example: `!move B3` would move your active character to B3

            **__Main Arguments__**
            `-t <target>` - Select a target for adjusting location, color and size.
            `-mapattach <target>` - Gives a target an effect that contains map information such as size and background
            `-over <overlay>` - Creates an overlay on the map. Options for these are described in `!map help overlay`
            `-spell <spell>` - Grabs a 'spell' from your `mapOverlays` uvar, and adds it as an overlay. More details found in `!map help overlay`

            **__Target Arguments__** - Defaults to your currently active character. Requires a `-t` target if `-over` is used
            `-move [location]` - Sets the `-t` targets location on the map. For example `-move G3`.
            `-color [color]` - Sets the `-t` targets color on the map. `-color none` will reset it to to black. Valid arguments can be seen in the fields below.
            `-size [size]` - Sets the `-t` targets size on the map. `-size none` will reset it back to medium. Valid arguments can be seen in the fields below. 
            `-height [#]` - Sets the `-t` targets height. The map itself will look the same, but their height will be listed above in the description."
            
            -f "_ _|**__Map Arguments__** - Requires the map info to be set with `-mapattach`
            `-mapsize [size]` - Sets the size of the map. For example: 20x20
            `-mapbg [url]` - Sets a url to serve as the background. Maps are expected to have a grid scale of 40 px.
            `-mapoptions [options]` - Sets map options. Available options can be seen below.
            Settings can be viewed by running `!i aoo <mapattachee> map`"

            -f "_ _|If these settings are run when they aren't attached to a `-mapattach` target (either when running the `-mapsize` or previously), then the change is temporary, and will be switched back to your default the next time you run the `!map` command.

            Every time you run a `!map` command, it will save a backup uvar `mapState#####` where the #### is your channel ID. You can revert to this state with `!map undo`. Use this in emergencies, as it may be an old back up. If you use it, and its worse somehow, running `!map undo` a second time will revert it back to where it was before you ran it originally.

            The map calculates distances based on 5ft diagonals. If you would rather 'True' distances, run `!uvar trueDistance true`. To revert back, use `!uvar delete trueDistance`. " """

 help += f"""-f "Valid Colors|{newline.join([f"`{x[0]}` - {x[1]}" for x in COL.items()])}
            You can also provide 3 or 6 digit hex codes, like `D73` or `D2773f`|inline"
            -f "Valid Sizes|{newline.join([f"`{x[0]}` - {x[1]}" for x in SIZ.items()])}|inline"
            -f "Valid Map Options (For `-mapoptions`)|`d` - Dark mode{newline}`h` - Grid at half transparancy{newline}`n` - Grid hidden{newline}`1`,`2`,`3` - Different zoom options|inline" 
            -f "OTFBM Help|Additional reading on OTFBM website and functionality can be found [here](http://docs.otfbm.com/)" """

 return help.replace(" "*11,"")
</drac2>
-footer "!map ?{{f" | Map settings attached to {mapattach.name}" if mapattach else ""}}{{(f" | Page {args.last('page',1)} / {len(spellPagin)} | -page # to change page" if len(spellPagin)>1 else "")+" | -search [name] to search" if not c or args.get('spelllist') else "" }}"

<drac2>
# this is for debugging, only display in testing channels
if int(chanid()) in (712795723623694376, 720465301329805332) and finalMap:
 return f"""-f "Debug (Only appears in this channel)|```{overlays=}
 {people=}
 {debug=}```" """
</drac2>

-color <color>