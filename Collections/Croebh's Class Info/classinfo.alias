embed <drac2>

args = &ARGS&
ch = character()
n = "\n"

classes    = load_json(get_gvar("a53f12b4-bd1d-40d7-844f-9403a7dc5246"))
subclasses = load_json(get("subclass", "{}"))

def merge_dicts(dict1, dict2):
  for class_name, details in dict2.items():
    if class_name in dict1:
      dict1[class_name]["sub_level"] = details.get("sub_level", dict1[class_name]["sub_level"])
      dict1[class_name]["hit_die"] = details.get("hit_die", dict1[class_name]["hit_die"])
      dict1[class_name]["subclasses"].extend(details.get("subclasses", []))
    else:
      dict1[class_name] = details
  return dict1

server_classes = load_json(get_svar('class_info', '{}'))
classes = merge_dicts(classes, server_classes)

uvar_classes = load_json(get_uvar('class_info', '{}'))
classes = merge_dicts(classes, server_classes)

dice_out = []
sub_out  = []
note_out = []

hit_dice = {}

if len(args) >= 2:
  arg_cls, arg_sub = args[:2]
  arg_cls = ([cls for cls in classes if arg_cls.lower() in cls.lower() and ch.levels.get(cls) >= classes[cls].sub_level] + [""])[0]
  arg_sub = ([sub for sub in classes[arg_cls].subclasses if arg_sub.lower() in sub.lower()] + [""])[0]
  if arg_cls and arg_sub:
    subclasses[f"{arg_cls}Level"] = arg_sub
    ch.set_cvar("subclass", dump_json(subclasses))

for (cls, level) in ch.levels:
  cls_info = classes.get(cls, {})
  sub = subclasses.get(f"{cls}Level")
  size = cls_info.get("hit_die", 0)
  if size:
    hit_dice[size] = hit_dice.get(size, "") + f"+{cls}Level"
  if level >= cls_info.get('sub_level', 21) and not sub:
    note_out.append(f"You're missing a subclass for {cls}. Use `{ctx.prefix+ctx.alias} {cls} [sub name]` to set it.")
  sub_out.append(f"{cls} {f'({sub})' if sub else ''}: {level}")

for size, num in hit_dice.items():
  cc = ch.create_cc(f"Hit Dice (d{size})", minVal=0, maxVal=num.strip('+'), reset=None)
  dice_out.append(f"""{ch.get_cc(f"Hit Dice (d{size})")}d{size}""")

out = [f""" -f "Total Level|{ch.levels.total_level}" """]
out.append(f""" -f "Hit Dice|{n.join(dice_out)}|inline" """)
out.append(f""" -f "Class Levels|{n.join(sub_out)}|inline"   """)
if note_out:
  out.append(f""" -f "Notes|{n.join(note_out)}" """)

return n.join(out)
</drac2>

-title "Level Summary for {{name}}:"
-footer "{{ctx.prefix+ctx.alias}} [class] [subclass]"