<drac2>
TYPE = "Beast"
SPELL_NAME = "Summon Beast"
MIN_LEVEL = 2

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

open_b, close_b = "<"+"drac2"+">", "</"+"drac2"+">"
pf = ctx.prefix

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

stat_block = {
  "hp": 20 + (5 * spell_level),
  "ac": 11 + spell_level,
  "pb": proficiencyBonus,
  "strength": 18,
  "dexterity": 11,
  "constitution": 16,
  "intelligence": 4,
  "wisdom": 14,
  "charisma": 5,
  "type": "beast",
}

attacks = [{"name":"Maul","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"1d8 + 4 {spell_level} [piercing]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 5 ft., one target. *Hit:* 1d8 + 4 + the spell's level piercing damage."}],"_v":2}]
extra_effects = []
match summon_type:
  case "air":
    summon_name = "Air"
    stat_block['hp'] -= 10
    effects = [{"name": "Flyby", "desc": "The beast doesn’t provoke opportunity attacks when it flies out of an enemy’s reach."}]
  case "land":
    summon_name = "Land"
    effects = [{"name": "Pact Tactics", "desc": "Advantage on an attack rolls against creatures if an ally is within 5 ft"}]
  case "water":
    summon_name = "Water"
    effects = [{"name": "Pact Tactics", "desc": "Advantage on an attack rolls against creatures if an ally is within 5 ft"}]
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!" """

custom_names = load_yaml(get('summon_names', '{}'))
s_name = args.last('name')
if s_name == 'reset':
  custom_names.pop(summon_name, None)
elif s_name:
  custom_names[summon_name] = s_name
ch.set_cvar('summon_names', dump_yaml(custom_names))
s_name = custom_names.get(summon_name, f"Summoned {summon_name} {TYPE}")

attacks = [{"attack": attack} for attack in attacks]
stat_args = " ".join([' '.join([f"-{arg} {val}" for val in value]) if typeof(value)=='SafeList' else f"-{arg} {value}" for arg, value in stat_block.items()])

num_attacks = max(1, spell_level//2)
summon_command = f"""{pf}init add {c.me.init} "{s_name}" -p {stat_args} -group "{name}'s Summons" -note "Summoned by {name}\nMultiattack: {num_attacks}" """

c.me.set_group(f"{name}'s Summons")
c.me.add_effect(f"Summon {TYPE}", concentration=True, duration=600)


embed = f"""{pf}tembed -title "{name} summoned a {summon_name} {TYPE}!" -footer "{pf+ctx.alias} | Made by Croebh" -color {color} -thumb {image} -f "Spell Slots|{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}" """
embed += (f""" {open_b}combat().get_combatant("{s_name}").add_effect(name="Summon {TYPE}",attacks=load_yaml('''{dump_yaml(attacks)}''')){close_b}""")

for effect in extra_effects:
  effect_name = effect['name']
  effect_desc = effect['desc']
  effect_buttons = effect.get('buttons', [])
  effect_passive = effect.get('passive', [])
  effect_attacks = effect.get('attacks', [])

  embed += (f""" {open_b}combat().get_combatant("{s_name}").add_effect(name="{effect_name}",attacks=load_yaml('''{dump_yaml(effect_attacks)}'''),buttons=load_yaml('''{dump_yaml(effect_buttons)}'''),passive_effects=load_yaml('''{dump_yaml(effect_passive)}''')){close_b}""")

return f"""multiline
{summon_command}
{embed}
"""

</drac2>