<drac2>
TYPE = "Celestial"
SPELL_NAME = "Summon Celestial"
MIN_LEVEL = 5

using(init_add="f48672c2-8f25-4170-ba39-d5f6ffd38bd3")

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

stat_block = {
  "hp": (10 * spell_level) - 10,
  "ac": 11 + spell_level,
  "pb": proficiencyBonus,
  "strength": 16,
  "dexterity": 14,
  "constitution": 16,
  "intelligence": 10,
  "wisdom": 14,
  "charisma": 16,
  "type": "celestial",
  "resist": "radiant"
}

attacks = [{"name":"Healing Touch","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Healing Touch Used","duration":-1,"stacking":True}]},{"type":"target","target":"each","effects":[{"type":"damage","damage":f"-(2d8 + {spell_level}) [heal]"}]},{"type":"text","text":"The celestial touches another creature. The target magically regains hit points equal to 2d8 + the spell's level."}],"_v":2,"verb":"reaches out with"}]
extra_effects = []
match summon_type:
  case "avenger" | "avenge":
    summon_name = "Avenger"
    attacks.extend([{"name":"Radiant Bow","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"2d6 + 2 + {spell_level} [radiant]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Ranged Weapon Attack:* your spell attack modifier to hit, range 150/600 ft., one target. *Hit:* 2d6 + 2 + the spell's level radiant damage."}],"_v":2}])
  case "defender" | "defend":
    summon_name = "Defender"
    stat_block['ac'] += 2
    attacks.extend([{"name":"Radiant Mace","automation":[{"type":"target","target":1,"effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"1d10 + 3 + {spell_level} [radiant]"}],"miss":[],"adv":"0"}]},{"type":"target","target":2,"effects":[{"type":"temphp","amount":"1d10"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 5 ft., one target. *Hit:* 1d10 + 3 + the spell's level radiant damage, and the celestial can choose itself or another creature it can see within 10 feet of the target. The chosen creature gains 1d10 temporary hit points."}],"_v":2}])
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!" """

custom_names = load_yaml(get('summon_names', '{}'))
s_name = args.last('name')
if s_name == 'reset':
  custom_names.pop(summon_name, None)
elif s_name:
  custom_names[summon_name] = s_name
ch.set_cvar('summon_names', dump_yaml(custom_names))
s_name = custom_names.get(summon_name, f"Summoned {summon_name} {TYPE}")

stat_block['p'] = True
stat_block['group'] = f"{name}'s Summons"
stat_block['note'] = f"Summoned by {name}\nMultiattack: {max(1, spell_level//2)}"

c.me.set_group(f"{name}'s Summons")
c.me.add_effect(f"Summon {TYPE}", concentration=True, duration=600)

embed_args = {
  "title": f"{name} summoned a {summon_name} {TYPE}!",
  "desc": "You call forth a celestial spirit. It manifests in an angelic form in an unoccupied space that you can see within range. This corporeal form uses the Celestial Spirit stat block. When you cast the spell, choose Avenger or Defender. Your choice determines the creature's attack in its stat block. The creature disappears when it drops to 0 hit points or when the spell ends.\n\nThe creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn immediately after yours. It obeys your verbal commands (no action required by you). If you don't issue any, it takes the Dodge action and uses its move to avoid danger.",
  "fields": [{"title": "Spell Slots", "desc": f"{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}"}],
  "footer": f"{ctx.prefix+ctx.alias} | Made by Croebh",
  "color": color,
  "thumb": image
}

summon_command = init_add.build_init_add(s_name, c.me.init, stat_block)
embed = init_add.build_tembed(**embed_args, init_name=s_name, attacks=attacks, effect_name=f"Summon {TYPE}", extra_effects=extra_effects)

return f"""multiline
{summon_command}
{embed}
"""
</drac2>