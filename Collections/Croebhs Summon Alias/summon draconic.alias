<drac2>
TYPE = "Draconic Spirit"
SPELL_NAME = "Summon Draconic Spirit"
MIN_LEVEL = 5

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

open_b, close_b = "<"+"drac2"+">", "</"+"drac2"+">"
pf = ctx.prefix

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

stat_block = {
  "hp": 10 * spell_level,
  "ac": 14 + spell_level,
  "pb": proficiencyBonus,
  "strength": 19,
  "dexterity": 14,
  "constitution": 17,
  "intelligence": 10,
  "wisdom": 14,
  "charisma": 14,
  "type": "dragon",
}

attacks = [{"name":"Rend","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"1d6 + 4 + {spell_level} [piercing]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 10 ft., one target. *Hit:* 1d6 + 4 + the spell's level piercing damage."}],"_v":2},{"name":"Breath Weapon","automation":[{"type":"roll","dice":"2d6 [{{choice if caster.resistances.is_resistant(choice) else 'draconic'}}]","name":"damage"},{"type":"target","target":"each","effects":[{"type":"save","stat":"dex","dc":sdc,"fail":[{"type":"damage","damage":"{damage}"}],"success":[{"type":"damage","damage":"({damage})/2"}]}]},{"type":"text","text":"The dragon exhales destructive energy in a 30-foot cone. Each creature in that area must make a Dexterity saving throw against your spell save DC. A creature takes 2d6 damage of a type this dragon has resistance to (your choice) on a failed save, or half as much damage on a successful one."},{"type":"condition","condition":"not caster.resistances.is_resistant(choice)","onTrue":[{"type":"text","text":"You didn't select an appropriate damage type with `-choice [type]`. Please select one that is available for this summon."}],"onFalse":[],"errorBehaviour":"false"}],"_v":2,"verb":"unleashes their","proper":True},{"name":"Shared Resistances","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Sharing Resistances","save_as":"shared"}]},{"type":"target","target":"each","effects":[{"type":"ieffect2","name":"Shared Resistances","effects":{"resistances":["{{choice if caster.resistances.is_resistant(choice) else 'draconic'}}"]},"parent":"shared"}]},{"type":"text","text":"When you summon the dragon, choose one of its damage resistances. You have resistance to the chosen damage type until the spell ends."},{"type":"condition","condition":"not caster.resistances.is_resistant(choice)","onTrue":[{"type":"text","text":"You didn't select an appropriate damage type with `-choice [type]`. Please select one that is available for this summon."}],"onFalse":[],"errorBehaviour":"false"}],"_v":2,"verb":"begins to","proper":True,"activation_type":8}]
extra_effects = []
match summon_type:
  case "chromatic":
    summon_name = "Chromatic"
    stat_block['resist'] = ["acid", "cold", "fire", "lightning", "poison"]
  case "metallic":
    summon_name = "Metallic"
    stat_block['resist'] = ["acid", "cold", "fire", "lightning", "poison"]
  case "gem":
    summon_name = "Gem"
    stat_block['resist'] = ["force", "necrotic", "psychic", "radiant", "thunder"]
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!" """

attacks = [{"attack": attack} for attack in attacks]
stat_args = " ".join([' '.join([f"-{arg} {val}" for val in value]) if typeof(value)=='SafeList' else f"-{arg} {value}" for arg, value in stat_block.items()])

num_attacks = max(1, spell_level//2)
summon_command = f"""{pf}init add {c.me.init} "Summoned {summon_name} {TYPE}" -p {stat_args} -group "{name}'s Summons" -note "Summoned by {name}\nMultiattack: {num_attacks}" """

c.me.set_group(f"{name}'s Summons")
c.me.add_effect(f"Summon {TYPE}", concentration=True, duration=600)


embed = f"""{pf}tembed -title "{name} summoned a {summon_name} {TYPE}!" -footer "{pf+ctx.alias} | Made by Croebh" -color {color} -thumb {image} -f "Spell Slots|{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}" """
embed += (f""" {open_b}combat().get_combatant("Summoned {summon_name} {TYPE}").add_effect(name="Summon {TYPE}",attacks=load_yaml('''{dump_yaml(attacks)}''')){close_b}""")

for effect in extra_effects:
  effect_name = effect['name']
  effect_desc = effect['desc']
  effect_buttons = effect.get('buttons', [])
  effect_passive = effect.get('passive', [])
  effect_attacks = effect.get('attacks', [])

  embed += (f""" {open_b}combat().get_combatant("Summoned {summon_name} {TYPE}").add_effect(name="{effect_name}",attacks=load_yaml('''{dump_yaml(effect_attacks)}'''),buttons=load_yaml('''{dump_yaml(effect_buttons)}'''),passive_effects=load_yaml('''{dump_yaml(effect_passive)}''')){close_b}""")

return f"""multiline
{summon_command}
{embed}
"""

</drac2>