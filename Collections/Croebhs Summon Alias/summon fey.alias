<drac2>
TYPE = "Fey"
SPELL_NAME = "Summon Fey"
MIN_LEVEL = 3

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

open_b, close_b = "<"+"drac2"+">", "</"+"drac2"+">"
pf = ctx.prefix

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

stat_block = {
  "hp": 10 * spell_level,
  "ac": 12 + spell_level,
  "pb": proficiencyBonus,
  "strength": 13,
  "dexterity": 16,
  "constitution": 14,
  "intelligence": 14,
  "wisdom": 11,
  "charisma": 16,
  "type": "fey",
}

attacks = [{"name":"Shortsword","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"1d6 + 3 + {spell_level} [force]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 5 ft., one target. *Hit:* 1d6 + 3 + the spell's level piercing damage + 1d6 force damage."}],"_v":2}]
extra_effects = []
match summon_type:
  case "fuming" | "fume":
    summon_name = "Fuming"
    attacks = [{"name":"Fey Step","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Fumin Step","duration":1,"end":True,"desc":"Advantage on the next attack roll before the end of this turn"}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Fuming.** The fey has advantage on the next attack roll it makes before the end of this turn."}],"_v":2,"verb":"takes","activation_type":3}]
  case "mirthful" | "mirth":
    summon_name = "Mirthful"
    attacks = [{"name":"Fey Step","automation":[{"type":"target","target":"each","effects":[{"type":"save","stat":"wis","dc":sdc,"fail":[{"type":"ieffect2","name":"Charmed","duration":10,"desc":"Charmed by {{caster.name}} until it takes any damage","buttons":[{"label":"End Charm","verb":"is no longer charmed","automation":[{"type":"remove_ieffect","removeParent":"if_no_children"},{"type":"text","text":"The affected creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success."}]}]}],"success":[],"adv":0}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Mirthful.** The fey can force one creature it can see within 10 feet of it to make a Wisdom saving throw against your spell save DC. Unless the save succeeds, the target is charmed by you and the fey for 1 minute or until the target takes any damage."}],"_v":2,"verb":"takes","activation_type":3}]
  case "tricksy" | "trick":
    summon_name = "Tricksy"
    attacks = [{"name":"Fey Step","automation":[{"type":"target","target":"self","effects":[{"type":"ieffect2","name":"Tricksy Step","duration":2,"end":True,"desc":"The fey can fill a 5-foot cube within 5 feet of it with magical darkness, which lasts until the end of its next turn"}]},{"type":"text","text":"The fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey's chosen mood:\n\n**Tricksy.** The fey can fill a 5-foot cube within 5 feet of it with magical darkness, which lasts until the end of its next turn."}],"_v":2,"verb":"takes","activation_type":3}]
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!" """

custom_names = load_yaml(get('summon_names', '{}'))
s_name = args.last('name')
if s_name == 'reset'
  custom_names.pop(summon_name, None)
elif s_name:
  custom_names[summon_name] = s_name
ch.set_cvar('summon_names', dump_yaml(custom_names))
s_name = custom_names.get(summon_name, f"Summoned {summon_name} {TYPE}")

attacks = [{"attack": attack} for attack in attacks]
stat_args = " ".join([' '.join([f"-{arg} {val}" for val in value]) if typeof(value)=='SafeList' else f"-{arg} {value}" for arg, value in stat_block.items()])

num_attacks = max(1, spell_level//2)
summon_command = f"""{pf}init add {c.me.init} "{s_name}" -p {stat_args} -group "{name}'s Summons" -note "Summoned by {name}\nMultiattack: {num_attacks}" """

c.me.set_group(f"{name}'s Summons")
c.me.add_effect(f"Summon {TYPE}", concentration=True, duration=600)


embed = f"""{pf}tembed -title "{name} summoned a {summon_name} {TYPE}!" -footer "{pf+ctx.alias} | Made by Croebh" -color {color} -thumb {image} -f "Spell Slots|{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}" """
embed += (f""" {open_b}combat().get_combatant("{s_name}").add_effect(name="Summon {TYPE}",attacks=load_yaml('''{dump_yaml(attacks)}''')){close_b}""")

for effect in extra_effects:
  effect_name = effect['name']
  effect_desc = effect['desc']
  effect_buttons = effect.get('buttons', [])
  effect_passive = effect.get('passive', [])
  effect_attacks = effect.get('attacks', [])

  embed += (f""" {open_b}combat().get_combatant("{s_name}").add_effect(name="{effect_name}",attacks=load_yaml('''{dump_yaml(effect_attacks)}'''),buttons=load_yaml('''{dump_yaml(effect_buttons)}'''),passive_effects=load_yaml('''{dump_yaml(effect_passive)}''')){close_b}""")

return f"""multiline
{summon_command}
{embed}
"""

</drac2>