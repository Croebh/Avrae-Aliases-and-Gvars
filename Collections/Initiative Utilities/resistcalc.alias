<drac2>
args = &ARGS&
n = "\n"
output = ""

if not (args and (Com := combat())) or any(x for x in ['help','?'] if args[0] in x) : # Early out for help
    desc = f"""{ctx.alias.title()} is a tool for dealing damage that accounts for resistances of a target in combat.
    `{ctx.prefix+ctx.alias} <dice> [args]` - damage dice to apply to all targets

    **__Valid Arguments__**
    `-t <name>` - adds a target for the damage, accepts groups. If no targets are given it will use the current combatant
    `-t "<name>|<args>"` - allows for target specific args
    `-source <name>` - adds a source for the damage. Matches to a combatant or use the text as-is if not found
    `crit` - deal critical damage
    `-crit dice <num>` - bonus dice to add to each dice group on critical
    `-c "<dice>"` - bonus damage to deal on critical
    `-d "<dice>"` - extra dice to add, most useful for applying to specific targets
    `-resist <type>` - Gives the combatant resistance to the given damage type.
    `-immune <type>` - Gives the combatant immunity to the given damage type.
    `-vuln <type>` - Gives the combatant vulnerability to the given damage type.
    `-neutral <type>` - Removes the combatants' immunity, resistance, or vulnerability to the given damage type.
    `overheal` - allows negative damage to heal past a target's max hp
    """
    return f"""embed -title "Looking to Do Some Damage?" -desc "{desc}" """
dice = args.pop(0)  # Pull out the dice
args = argparse(args)  # Parse the rest

t = args.get('t') or Com.current  # Can be empty, apply to current instead
# can be none or a combatant
globalsources = [Com.get_combatant(x).name if Com.get_combatant(x) else x for x in args.get('source')]
globalcrit = args.last('crit', False, bool)
globald = args.get('d')
globalc = args.get('c')
globalcritdice = args.get('critdice', type_=int)
globaloverheal = args.last('overheal')
globalneut = args.get('neutral')
globalresist = args.get('resist')
globalimmune = args.get('immune')
globalvuln = args.get('vuln')

for context in t:
    context = context.split('|')
    if (tar := Com.get_combatant(context[0]) or Com.get_group(context[0])):
        localargs = argparse(context[1] if len(context) > 1 else [])
        # Get the local versions of the args we use
        sources = ', '. join(globalsources+[x.name if Com.get_combatant(x) else x for x in localargs.get('source')])
        crit = localargs.last('crit', False, bool) + globalcrit
        d = '+'.join(localargs.get('d') + globald)
        c = '+'.join(localargs.get('c') + globalc)
        critdice = sum(localargs.get('critdice', type_=int) + globalcritdice)
        overheal = localargs.last('overheal') or globaloverheal
        
        # adding resistances requires a temporary effect
        neut = localargs.get('neutral') + globalneut
        resist = localargs.get('resist') + globalresist
        immune = localargs.get('immune') + globalimmune
        vuln = localargs.get('vuln') + globalvuln
        if typeof(tar) == 'SimpleGroup':
            tar = tar.combatants
        else:
            tar = [tar]
        # handle groups
        for target in tar:
            target.add_effect(f'Temporary Resists for {ctx.alias}', passive_effects={"resistances": resist, "immunities": immune, "vulnerabilities": vuln, "ignored_resistances": neut})

            # apply it all to a damage
            dmg = target.damage(dice, crit=crit, d=d, c=c, critdice=critdice, overheal=overheal)
            output += f""" -f "{target.name}{f' is harmed by {sources}' if sources else ''}|{dmg.damage}{n}{target.hp_str()}" """

            # remove added resists
            target.remove_effect(f'Temporary Resists for {ctx.alias}')

return f"""embed -title "Damage is Done!" {output}"""
</drac2>
