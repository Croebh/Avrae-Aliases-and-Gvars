embed

<drac2>

VERSION = "5.0.1"
debug   = get('useDebug')

# ------------------
# | Constants, etc |
# ------------------

SaveTypes = ["dex", "str", "con", "wis", "int", "cha"]
StatTypes = ["dexterity", "strength", "constitution", "wisdom", "intelligence", "charisma"]
NewLine   = "\n"

init = combat()

# ---------------
# | Arg Parsing |
# ---------------

a     = &ARGS&
c     = []

args  = argparse(a)

out   = args.last('out')
help  = not a or args.last('?') or args.last('help')

# Loop through our resources uvar/svar
cgvar = {}
for gvar in load_json(get_svar('useResources', '[]')) + load_json(get('resources','[]')):
 # If its a valid gvar, add it to the list
 if (gvarLoad := get_gvar(gvar)) and typeof((gvarLoad := load_json(gvarLoad)))=="SafeDict":
  cgvar.update(gvarLoad)
 # Otherwise, inform the user that it was invalid
 else:
  return f""" -title "Invalid GVAR: `{gvar}`"
  -desc "Please remove it from either your `resources` uvar, or your `useResources` svar." """

cvar  = args.last('cvar') or (a[0] if a else {})
# If we have a cvar, lets add it to our args
if not (help or out) and (input := (get(cvar) or cgvar.get(cvar))):
 # If it was a cvar and not in the gvar, load it as a json
 if typeof(input) == "str":
  input = load_json(input)
 # Loop over each item in the var
 for arg, item in input.items():
  # If it was a list (such as preset targets), add them all
  if typeof(item) == "SafeList":
   for iterItem in item:
    c.extend([f"-{arg}", iterItem])
  # Otherwise just add it
  else:
   c.extend([f"-{arg}", item])

# Reparse with the new arg list
args = argparse(c + a)

totalDamage = 0
anno = {}

user = (init.get_combatant(args.last('user', name)) if init else None) or character()
name = user.name if user else name

# Misc
anno["n"]           = args.last("n",     "", str)
anno["ndesc"]       = args.last("ndesc", "", str)
anno["roll"]        = args.last("roll",  "", str)

# Default to cantrip scaling
if scaleDict := args.last('scale', {"1" : 1, "5" : 2, "11" : 3, "17" : 4}):
  if typeof(scaleDict) == "str":
   scaleDict = load_json(scaleDict.replace("'", '"'))
scale = 0
for lvl, value in scaleDict.items():
 if user.levels.total_level >= int(lvl):
  scale = value

# Quick access to their default spell stats
spellDC             = user.spellbook.dc
spellAB             = user.spellbook.sab

bags = load_json(get('bags', '[]'))

# One Off
anno["dc"]          = args.last('dc',   "10", str)
crit                = args.last('crit', False, bool)
save_type           = args.last('save', args.last('s', 'dex')).lower()[:3]

# General
minDamage           = None
maxDamage           = None
anno["save_bonus"]  = args.get('b')
anno["damage"]      = args.last('d',           "", str)
anno["maxhp"]       = args.last('max',         "", str)
anno["temphp"]      = args.last('thp',         "", str)
anno["effect"]      = args.last("effect",      "", str)
anno["effectdesc"]  = args.last("effectdesc",  "", str)
anno["seffect"]     = args.last("seffect",     "", str)
anno["seffectdesc"] = args.last("seffectdesc", "", str)

# Flavour
anno["phrase"]      = args.join('phrase', NewLine, "")
anno["desc"]        = args.last('desc',   '', str)
anno["thumb"]       = args.last('thumb',
                                 image if character().name == user.name else
                                 "https://cdn.discordapp.com/attachments/349765584302505985/597101368117035038/246x0w.png",
                                 str)
anno["color"]       = args.last('color',  color, str)
anno["image"]       = args.last('image',  "", str)
anno["title"]       = args.last('title',  '', str)

# We need this to be a dict for the annotating below
targetsCache        = {i:targ for i, targ in enumerate(args.get('t', [] if args.last('noself') else [name]))}
# Are we targeting every combatant?
if args.last('all') and init:
  targetsCache.update({i:f"""{combatant.name}""" for i, combatant
   in enumerate(init.combatants, max(targetsCache))})

gAutoPass           = args.adv(custom={'adv': 'pass', 'dis': 'fail'})
# More intuitive option than fail for when you don't want them to save
if args.last('nosave'):
 gAutoPass = -1
hide                = args.last('h')

# Clear out unused args
for arg in anno.copy():
 if not anno.get(arg):
  anno.pop(arg)

# ---------------------------
# | Annotate all the Things |
# ---------------------------

mathsep   = "+-()/*[]<>="
wasList   = False
if not (out or help):
 for annoGroup in [anno, targetsCache]:
  for key, string in annoGroup.items():
   # Get all parts enclosed in {braces}
   if typeof(string) == 'SafeList':
    string  = '&&&'.join(string)
    wasList = True
   bracedSegments = [(part := part.split('{')[0])[:part.index('}')] for part in string.split('{') if '}' in part]
   stringOut = []
   # Iterate over each one
   for segment in bracedSegments:
    segOut = []
    # Separate out things in mathsep, with spaces
    sepSegment = "".join([(f" {char} " if char in mathsep else char) for char in segment]).split()
    # Iterate over each part
    for sep in sepSegment:
     # If its a number, or a math seperator, add it to the output unchanged
     if (sep.strip('-.').isdigit() or sep in mathsep):
      segOut.append(sep)
     # If a annotated exists, add that
     elif anno.get(sep) is not None:
      if typeof(anno.get(sep)) == "SimpleRollResult":
       segOut.append(str(anno.get(sep).total))
      else:
       segOut.append(str(anno.get(sep)))
     # If an -arg was provided with this name, add that
     elif args.last(sep) is not None and sep != "scale":
      segOut.append(str(args.last(sep)))
     # If a variable exists, add that
     elif get(sep) is not None:
      segOut.append(str(get(sep)))
     # Otherwise add it unchanged
     else:
      segOut.append(sep)
    # Convert it to a string
    segOut = ''.join(segOut)
    # Roll and append (invalid roll() return 0)
    stringOut.append(roll(segOut) if segOut.strip('+-').isdigit() else roll(segOut) or segOut)
   # Replace the original string
   for i, origin in enumerate(bracedSegments):
    string = string.replace("{"+origin+"}", str(stringOut[i]))
   # Roll our rollables
   if wasList:
    string  = string.split('&&&')
    wasList = False
   if key in ["damage", "maxhp", "temphp", "dc", "roll", "n"]:
    if key in ["dc", "n"]:
     annoGroup[key] = roll(string)
    elif key in ["maxhp", "temphp", "roll"]:
     annoGroup[key] = vroll(string)
    elif key == "damage":
     if '|' in string:
      string, minDamage, maxDamage = (string.split('|')+[""])[:3]
      if minDamage:
       minDamage    =  roll(minDamage)
      if maxDamage:
       maxDamage    =  roll(maxDamage)
     annoGroup[key] = vroll(string, 1 + (crit if key == "damage" else 0))
   else:
    annoGroup[key] = string

# ----------------------------------
# | Args part two elecric boogaloo |
# ----------------------------------

# Ignore Certain Args so we aren't reparsing them in the target loop if not outputting
if not (out or help):
 args.ignore('d')
 args.ignore('max')
 args.ignore('thp')
 args.ignore('pass')
 args.ignore('fail')
 args.ignore('b')

# ---------------
# | Consumables |
# ---------------

# Default to 'everything is fine'
valid           = True

consumeOut      = []
consumes        = {"cc": {}, "slot": {}, "item": {}}
invalidConsumes = {"cc": [], "slot": [], "item": []}

# Can only access counters and items on the active character
if user and user.name == name:
 for counterNum in [""]+[str(x) for x in range(1,11)]:
  if cc := args.last('cc' + counterNum):
   ccUses = args.last('ccnum' + counterNum, 1, int)
   # Was it an exact match?
   if character().cc_exists(cc):
    cc = character().cc(cc)
   # Otherwise, loop through all counters and fuzzy search
   else:
    for counter in character().consumables:
     if cc.lower() in counter.name.lower():
      cc = counter
      break
    # If we got through the whole for loop with nothing, no matches
    else:
     cc = None
   # Did we find a valid counter? Add it to the consumes dic
   if cc:
    consumes["cc"].update({cc: consumes["cc"].get(cc.name, 0) - ccUses})
   else:
    cc = args.last('cc' + counterNum)
    invalidConsumes["cc"].append(f"""**{cc}** ({ccUses:+}): Counter could not be found.""")

 # Item shit here!
 for itemNum in [""]+[str(x) for x in range(1,11)]:
  if item := args.last('item' + itemNum):
   itemUses = args.last('itemqty' + itemNum, 1, int)
   # If we don't have a specified bag, search all bags?
   if not "|" in item:
    item = f"|{item}"
   itemBag, item = item.split("|")
   for index, bag in enumerate(bags):
    bag, items = bag
    if itemBag.lower() in bag.lower() and item in items:
     consumes["item"].update({item: [index, consumes["item"].get(item, [0,0])[1] + itemUses]})
     break
   else:
    invalidConsumes["item"].append(f"""Could not find {item} in your {itemBag if itemBag else 'bags'}.""")

for slotNum in [""]+[str(x) for x in range(1,11)]:
 if slot := args.last('slot' + slotNum):
  slotUses = args.last('slotnum' + slotNum, 1, int)
  # Does that character even have slots of that level?
  if user.spellbook.get_max_slots(slot):
   consumes["slot"].update({int(slot): consumes["slot"].get(int(slot), 0) - slotUses})
  else:
   invalidConsumes["slot"].append(f"""`{slot}` ({slotUses:+}): You don't have slots of this level.""")


# Make sure all counters won't be made out of bounds
counterValid = all([1 if cc.min <= (cc.value + ccUses) <= cc.max else invalidConsumes["cc"].append(f"""**{cc.name}** ({ccUses:+}): {str(cc)}""") for cc, ccUses in consumes["cc"].items()])
slotValid = all([1 if 0 <= (user.spellbook.get_slots(slot) + slotUses) <= user.spellbook.get_max_slots(slot) else invalidConsumes["slot"].append(f"""{user.spellbook.slots_str(slot)} ({slotUses:+})""") for slot, slotUses in consumes["slot"].items()])
# info[0] is the bag index, info[1] is the quantity
itemValid = all([1 if 0 <= (bags[info[0]][1].get(item) - info[1]) else invalidConsumes["item"].append(f"""**{item}** in **{bags[info[0]][0]}** ({-info[1]:+}): {bags[info[0]][1].get(item)} remaining""")  for item, info in consumes["item"].items()])

if not args.last('i') and not (out or help):
 if not invalidConsumes["item"] and not invalidConsumes["slot"] and not invalidConsumes["cc"]:
  # If everything was valid, go through and modify them all
  for cc, ccUses in consumes["cc"].items():
   cc.set(cc.value + ccUses)
   consumeOut.append(f""" -f "{cc.name} ({ccUses:+})|{str(cc)}" """)
  slotOut = []
  for slot, slotUses in consumes["slot"].items():
   user.spellbook.set_slots(slot, user.spellbook.get_slots(slot) + slotUses)
   slotOut.append(f"""{user.spellbook.slots_str(slot)} ({slotUses:+})""")
  else:
   consumeOut.append(f"""  -f "Slots Remaining|{NewLine.join(slotOut)}" """) if slotOut else None
  if consumes["item"]:
   for item, info in consumes["item"].items():
    bags[info[0]][1][item] = bags[info[0]][1][item] - info[1]
    consumeOut.append(f""" -f "Items remaining in `{bags[info[0]][0]}`|{item} ({-info[1]:+}): {bags[info[0]][1][item]}" """)
   else:
    character().set_cvar("bags", dump_json(bags))

 # Otherwise, something would go out of bounds, cancel everything and inform the user
 else:
  consumeOut.append(f""" -f "Consumable out of Bounds|Unfortunately, one or more of your consumables would be put out of bounds by this action:
   {NewLine.join(invalidConsumes["cc"]) if invalidConsumes["cc"] else ""}
   {NewLine.join(invalidConsumes["slot"]) if invalidConsumes["slot"] else "" }
   {NewLine.join(invalidConsumes["item"]) if invalidConsumes["item"] else "" }" """.replace("   ","").replace("\n\n", "\n").replace("\n\n", "\n"))
  valid = False

# ------------------
# | Effect Parsing |
# ------------------

# Targetted Effects
if anno.get('effect'):
 effect = {}
 eSplit  = anno.get('effect').split('|')
 # First arg should always be there
 effect["name"] = eSplit.pop(0)
 effect["args"] = ""
 effect["dur"]  = -1

 # If theres only one arg left, it'd be args
 if len(eSplit) == 1:
   effect["args"] = eSplit.pop(0)
 # If its two, its args and duration
 elif len(eSplit) == 2:
   effect["args"] = eSplit.pop(0)
   effect["dur"]  = eSplit.pop(0)
 # If its 3 or more, and has -attack, account for that
 elif len(eSplit) >= 3 and '-attack' in anno.get('effect'):
   # Count how many -attack are in the args
   aCount = anno.get('effect').count('-attack')*3
   effect["args"] = '|'.join(eSplit[:aCount])
   effect["dur"]  = (eSplit[aCount:] or [-1])[0]

 # Handle our special arguments
 effectArgs = argparse(effect["args"])
 for special in ["end", "conc", "desc"]:
  effect[special] = effectArgs.last(special)

 anno["effect"] = effect

# Self Effects
if anno.get('seffect'):
 effect = {}
 eSplit  = anno.get('seffect').split('|')
 # First arg should always be there
 effect["name"] = eSplit.pop(0)
 effect["args"] = ""
 effect["dur"]  = -1

 # If theres only one arg left, it'd be args
 if len(eSplit) == 1:
   effect["args"] = eSplit.pop(0)
 # If its two, its args and duration
 elif len(eSplit) == 2:
   effect["args"] = eSplit.pop(0)
   effect["dur"]  = eSplit.pop(0)
 # If its 3 or more, and has -attack, account for that
 elif len(eSplit) >= 3 and '-attack' in anno.get('effect'):
   # Count how many -attack are in the args
   aCount = anno.get('effect').count('-attack')*3
   effect["args"] = '|'.join(eSplit[:aCount])
   effect["dur"]  = (eSplit[aCount:] or [-1])[0]

 # Handle our special arguments
 effectArgs = argparse(effect["args"])
 for special in ["separate", "parent", "end", "conc", "desc"]:
  effect[special] = effectArgs.last(special)

 anno["seffect"] = effect

# -------------------
# | Get Target Loop |
# -------------------

targets   = []
targetOut = []
targetArg = {}
if init:
 for targ in targetsCache.values():
   targName, targArgs = (targ.split("|")+[""])[:2]
   targArgs = argparse(targArgs)
   if curTarg := init.get_combatant(targName.replace('{name}', name)):
    targets.append(curTarg)
    args.add_context(curTarg.name, targArgs)
    targetArg[curTarg.name] = targArgs
   elif curTarg := init.get_group(targName):
    for gTarg in curTarg.combatants:
     targets.append(gTarg)
     args.add_context(gTarg.name, targArgs)
     targetArg[gTarg.name] = targArgs

# --------------------
# | Main Target Loop |
# --------------------

if not (out or help) and valid:
 for target in targets:
  tOut = []

  # Grab our specific targets arguments
  args.set_context(target.name)
  autoPass = args.adv(custom={'adv': 'pass', 'dis': 'fail'})

  # Figure out our entire damage string
  targDamage = anno["damage"].consolidated() if anno.get("damage") else ""
  if minDamage and anno.get("damage").total < minDamage:
   targDamage = str(minDamage)
  if maxDamage and anno.get("damage").total > maxDamage:
   targDamage = str(maxDamage)
  if targD := args.get('d'):
   targDamage += "+" + "+".join(targD)

  # Figure out our entire max hp adjustment
  targMaxhp = anno["maxhp"].consolidated() if anno.get("maxhp") else ""
  if targM := args.get('max'):
   targMaxhp += "+" + "+".join(targM)

  # Figure out our entire temp hp adjustment
  targTemphp = anno["temphp"].consolidated() if anno.get("temphp") else ""
  if targT := args.get('thp'):
   targTemphp += "+" + "+".join(targT)

  # If we aren't automatically passing or failing
  if not (gAutoPass or autoPass):

   # Figure out all of our save bonuses
   save_bonus = anno.get("save_bonus", []) + args.get('b', [])
   save_adv   = []
   save_dis   = []
   for effect in target.effects:
    if (sb := effect.effect.get('sb')):
     save_bonus.append(sb)
    if (sadv := effect.effect.get('sadv')):
     save_adv.extend(sadv)
    if (sdis := effect.effect.get('sdis')):
     save_dis.extend(sdis)

   if save_type in save_adv or 'all' in save_adv:
    args.add_context(target.name, argparse(targetArg[target.name] + ' adv'))
   if save_type in save_dis or 'all' in save_dis:
    args.add_context(target.name, argparse(targetArg[target.name] + ' dis'))

   args.set_context(target.name)
   adv = args.adv(boolwise=True)

   # Grab our save string and add our bonuses
   saveStr  = target.saves.get(save_type).d20(adv)
   if save_bonus:
    saveStr += '+' + '+'.join(save_bonus).replace('+-', '-')

   # Roll the save and compare against the DC
   save     = vroll(saveStr)
   success  = save.total >= anno["dc"]

   tOut.append(f"""**{save_type.upper()} Save:** {save}; {["Failure", "Success"][success]}!""")
  elif gAutoPass:
   # Global flag (1 is true, -1 is false)
   success = gAutoPass == 1
  else:
   # Target flag (1 is true, -1 is false)
   success = autoPass == 1
   tOut.append(f"""**{save_type.upper()} Save:** Automatic {["Failure", "Success"][success]}!""")

  # If they failed, do things to them
  if not success:
   # Do we have damage? If so, apply it and add to total
   if targDamage:
    if args.last('avoid'):
     targDamage = f"""({targDamage})/2"""
    targDamage = target.damage(targDamage, crit)
    totalDamage += targDamage.total
    tOut.append(targDamage.damage)
   # Do we have a max hp adjustment? If so, apply it and add to total
   if targMaxhp:
    targMaxhp = vroll(targMaxhp)
    target.set_maxhp(target.max_hp + targMaxhp.total)
    # Was there a specific adjustment?
    if targMaxhp.total != anno.get("maxhp", {"total": None}).total:
     tOut.append(f"""**Max HP Roll:** {targMaxhp}""")
    tOut.append(f"""Max HP {["Decreased", "Increased", "Unchanged"][(targMaxhp.total>=0) + (targMaxhp==0)]}: `{targMaxhp.total:+}`""")
   # Do we have a max hp adjustment? If so, apply it and add to total
   if targTemphp:
    targTemphp = vroll(targTemphp)
    # Was there a specific adjustment?
    if targTemphp.total != anno.get("temphp", {"total": None}).total:
     tOut.append(f"""**Temp. HP Roll:** {targTemphp}""")
    if targTemphp.total > target.temp_hp:
     target.set_temp_hp(targTemphp.total)
     tOut.append(f"""Temp. HP Set: `{targTemphp.total}`""")
    else:
     tOut.append(f"""Temp. HP Unchanged: `{target.temp_hp}`""")
   # Are we adding an effect?
   if tEffect := anno.get("effect"):

    # Set our parent effect (Defaulting to None)
    parent = None
    # If we're parenting the effect to a target, we need to make sure that effect exists
    if (sEffect := anno.get("seffect")) and sEffect.get('parent') and typeof(user) == "SimpleCombatant":
     # Are we created one parent effect?
     if not sEffect.get('separate'):
      # If the parent effect doesn't exist yet, lets create it
      if not sEffect.get('created'):
       user.add_effect(sEffect["name"], sEffect["args"], sEffect["dur"], sEffect["conc"], end=sEffect["end"], desc=anno.get("seffectdesc"))
       sEffect["created"] = [(parent := user.get_effect(sEffect["name"]))]
     # Otherwise, we need to append or replace the targets name (so our effects don't overwrite)
     else:
      if "[tname]" not in sEffect["name"]:
       sName = sEffect["name"] + f" - {target.name}"
      else:
       sName = sEffect["name"].replace("[tname]", target.name)
      user.add_effect(sName, sEffect["args"], sEffect["dur"], sEffect["conc"], end=sEffect["end"], desc=anno.get("seffectdesc"))
      sEffect["created"] = sEffect.get("created", []) + [(parent := user.get_effect(sName))]
    # Finally, add our effect
    target.add_effect(tEffect["name"], tEffect["args"], tEffect["dur"], tEffect["conc"], parent, tEffect["end"], anno.get("effectdesc"))
    tOut.append(f"""**Effect:** {str(target.get_effect(tEffect["name"])).splitlines()[0]}""")

  else:
   # Do we have damage and half/avoid? If so, apply it and add to total
   if targDamage and (args.last('avoid') or args.last('half')):
    if args.last('avoid'):
     targDamage = f"""({targDamage})*0"""
    elif args.last('half'):
     targDamage = f"""({targDamage})/2"""
    targDamage = target.damage(targDamage, crit)
    totalDamage += targDamage.total
    tOut.append(targDamage.damage)

  # Add our target output to the list
  if tOut:
   targetOut.append(f""" -f "{target.name}|{NewLine.join(tOut)}|inline" """)

  # Reset our context
  args.set_context(None)

# -------------------
# | Self Targetting |
# -------------------

userOut = []
if not (out or help) and valid:
 # Is the user an active combatant?
 if typeof(user) == "SimpleCombatant":
  # Lets do effects first (only?)
  # If we have an seffect, and wasn't already created
  # and not just not made because everyone passed their save
  if sEffect := anno.get("seffect"):
   if not sEffect.get('created') and not 'parent' in sEffect.get('args'):
    user.add_effect(sEffect["name"], sEffect["args"], sEffect["dur"], sEffect["conc"], end=sEffect["end"], desc=anno.get("seffectdesc"))
    sEffect["created"] = sEffect.get("created", []) + [user.get_effect(sEffect["name"])]
   for effect in sEffect.get("created"):
    userOut.append(f"""**Effect:** {str(effect).splitlines()[0]}""")

if userOut:
 userOut = f""" -f "{user.name}|{NewLine.join(userOut)}" """
else:
 userOut = ""

# ---------------
# | Meta Output |
# ---------------

metaOut = []
if valid:
 if anno.get("damage"):
  metaOut.append(f"""**Damage:** {"Hidden" if hide else f'''{anno["damage"]}'''}""")
  if minDamage or maxDamage:
   metaOut[-1] += f""" ({f"min: {minDamage}"}, {f"max: {maxDamage}"}) """.replace("(,", "(")
   if minDamage and minDamage > anno.get('damage').total:
    metaOut[-1] += f""" -> {minDamage} """
   if maxDamage and maxDamage < anno.get('damage').total:
    metaOut[-1] += f""" -> {maxDamage} """
 if anno.get("maxhp"):
  metaOut.append(f"""**Max HP:** {anno["maxhp"]}""")
 if anno.get("temphp"):
  metaOut.append(f"""**Temp. HP:** {anno["temphp"]}""")
 if anno.get('n'):
  metaOut.append(f"""**{anno.get('ndesc', 'Number')}**: {anno.get('n')}""")
 if anno.get('roll'):
  metaOut.append(f"""**Roll**: {anno.get('roll')}""")
 # We don't need save info if everyone auto fail/passes
 if not gAutoPass:
  metaOut.append(f"""**DC:** {"Hidden" if hide else anno["dc"]}""")
  metaOut.append(f"""{save_type.upper()} save""")
if metaOut:
 # Join it together
 metaOut = f""" -f "Meta|{NewLine.join(metaOut)}" """
else:
 metaOut = ""

# ------------------
# | Flavour Output |
# ------------------

flavourOut   = ""
flavourOut  += f""" -title "{anno.get("title", f'[name] wants you to make a [sname] Save!' if not gAutoPass else "[name] wants to do the thing!").replace('[name]', name).replace('[sname]', StatTypes[SaveTypes.index(save_type)].title())}" """
flavourOut  += f""" -color {anno.get('color')} """
flavourOut  += f""" -thumb {anno.get('thumb')} """
flavourOut  += f""" -image {anno.get('image')} """
if anno.get("desc"):
 flavourOut += f""" -f "Effect|{anno.get("desc")}" """
if anno.get("phrase"):
 flavourOut += f""" -desc "*{anno.get("phrase")}*" """


footerBase = f"{ctx.prefix}{ctx.alias} [args] | {ctx.prefix}{ctx.alias} ? | v{VERSION}{' | This was VERY recently updated, please let me know if there is issues' if VERSION == '5.0a' else ''}"
consumeOut = ' '.join(consumeOut)

if help:
 return """
-title "So I heard you want help?"
-desc "Rolls saves for combatants in init. Pulls their save bonuses and relevant effects from the combat.

**__Valid Arguments__**

Arguments marked with **†** allow for variable evaluation via `{}`

`-save [str|dex|con|wis|cha|int]` - Sets the save to be rolled (Default: Dex)
`-dc [#]` - Sets the DC (Default: 10). **†**
`-h` - Hides the DC and Damage

`-t \\"[target]\\"` - Sets targets for the save. You can chain multiple targets or do a single target. If you pass no targets, it will roll the save for your active character. `{name}` is replaced with your characters name.
`-t \\"[target]|[args]\\"` - Sets a target, and also allows for specific args to apply to them. (e.g, `-t \\"OR1|pass\\"` to force `OR1` to succeed.)
`all` - This will target *all* combatant in the initiative.
`noself` - This will cause it to not auto-target your active character if no other targets are provided.
`adv/dis` - Causes the save or saves to be rolled at dis/advantage.
`-b [conditional bonus]` - Adds (or subtracts) a bonus to the saves (accepts dice). **†**

`pass` - Automatically succeed on the save.
`fail` - Automatically fail the save.
`nosave` - Will not roll any saves, and treats it as a fail."

-f "Affect the Targets|`-d [damage]` - Sets damage to be dealt on a failed save. **†**
`-d \\"[damage]|[minimum]|[maximum]\\"` - Sets damage to be dealt on a fail, with a set maximum and or minimum damage. If no minimum, leave blank (`-d 1d10||1`). **†**
`crit` - Doubles the dice in `-d`
`half` - Halves the `-d` damage on a successful save.
`avoid` - Halves the `-d` damage on a failed save, and zeroes it out on a success.
`-effect \\"[name]|[effects]|[duration]\\"` - Adds an effect to the target. If no duration is given, defaults to infinite. **†**
`-effectdesc \\"[desc]\\"` - Adds a description to effects. **†**
`-max [#]` - Modifies the max health of those who fail the save. `{damage}` will be replaced by the total damage. **†**
`-thp [#]` - Sets the temporary hit points of those who fail the save. **†**"

-f "Self Targetting|`-seffect \\"[name]|[effects]|[duration]\\"` - Adds an effect to the user. If no duration is given, defaults to infinite. If `[effects]` contains the tag `parent`, any effects made by `-effect` will use this as its parent. If `[effects]` contains `separate`, it will make an individual effect on the user for each target that fails, either replacing `[tname]` in the effect name with the targets name, or appending it.  **†**
`-seffectdesc \\"[desc]\\"` - Adds a description to the seffect. **†**
`-user [name]` - Sets the 'user' of the ability, for `-seffect`. If no `-user` is given, defaults to your currently active character."

-f "Consumables|For all of these consumables, you can append a number from 1 through 10 (i.e, `-cc1`, `-ccnum1`), in order to affect multiple of a consumable type in a single command.
`-cc \\"[cc name]\\"` - Uses a single use of a counter. Errors if no uses remaining.
`-ccnum [#]` - Changes the amount of uses `-cc` uses/regains.
`-slot [#]` - Uses a single use of a spell slot. Errors if none remaining.
`-slotnum [#]` - Changes the amount of slots `-slot` uses.
`-item \\"[container]|[item]\\"` - Removes a single item from the appropriate container. Requires setup via the `!bag` alias.
`-itemqty [#]` - Changes the amount of items `-item` removes/adds.
`-i` - Sets `-ccnum` `-slotnum` and `-itemqty` to 0."

-f "Flavour/Description|`-title \\"[title]\\"` - Replaces the title. `[name]` and `[sname]`  will be replaced automatically. **†**
`-phrase \\"[flavor text]\\"` - Adds flavor text to the save. **†**
`-desc \\"[descriptive text]\\"` - Adds a field for rules text and such. **†**
`-thumb [url]` - Adds a thumbnail image.
`-image [url]` - Adds a full sized image.
`-color [hexcode]` - Sets the colour on the left side of the embed.
`-roll [dice]` - Rolls additional dice, just for display. **†**
`-n #` - A set number, such as damage taken or a minimum total. Can be called with `{n}` **†**
`-ndesc "[desc]"` - The description text used when `-n` is displayed in the meta field. Default is `Number`. **†**"

-f "Special Cvars|`{scale}` - Is replaced with cantrip scaling by default (1 till 5, then 2 till 11, etc). This scale can be overriden as follows: `-scale '{\\\"1\\\":10, \\\"5\\\":20, \\\"11\\\":30, \\\"17\\\":40}'`
`{spellDC}` - Is replaced with your sheets default Spell DC.
`{spellAB}` - Is replaced with your sheets default Spell Attack Bonus."

-f "Resources and Presets|`-cvar [cvar]` - Load a set of args from a cvar or uvar. Will attempt to load the first argument as a cvar (e.g, `dborn` in `!use dborn -t or1`)
`-out [cvar]` - Will output a code block for creating a cvar with the given arguments. Does **Not** create the cvar/uvar.
You can have gvars full of `!use` cvars, so you can potentially have one for all of the Paladin features, and subscribe to that instead of having personal cvars. Of course, personal cvars of the same name would have priority, in case you wanted to add additional pizzaz.

The cvar resources should contain a list of gvars, for example:
> `!cvar resources [\\"2a2deaec-180c-4d03-818c-879e465f1c0a\\"]`
You can also set a svar named `useResources` to have a server set as well.

Those gvars should consist of a JSON dictionary. Each item would contain a cvar. You can look up the above example gvar (`!gvar 2a2deaec-180c-4d03-818c-879e465f1c0a`) to see exactly how. It contains two cvars, `smite` and `lay`." """ + f"""  -footer "{footerBase}"  """

if out:
 arg_list = ["s", "save", "dc", "h", "b", "pass", "fail", "t", "d", "half", "title", "phrase", "desc", "thumb", "color", "image", "avoid", "i", "xroll", "thp", "max", "n", "effect", "effectdesc", "seffect", "seffectdesc", "scale", "nosave"]
 for consum in ["cc", "ccnum", "slot", "slotnum", "item", "itemqty"]:
  arg_list.extend([f"""{consum}{n}""" for n in [""]+range(1, 11)])
 quotes='\\"'
 cout = {x : (args.last(x) if x not in ['t', 'phrase'] else args.get(x)) for x in arg_list if x in args} if out else ''
 return f""" -title "U wanna cvar?" -desc "{'`' * 3}{NewLine}!cvar {out} {dump_json(cout).replace('"',quotes)}{NewLine}{'`' * 3}" -footer "{footerBase}" """
else:
 return metaOut + userOut + NewLine.join(targetOut) + consumeOut + flavourOut + f""" -footer "{NewLine.join([str(targ) for targ in targets] + [footerBase])}" """
</drac2>