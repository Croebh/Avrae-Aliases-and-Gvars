embed

<drac2>

# ------------------
# | Constants, etc |
# ------------------

SaveTypes = ["dex", "str", "con", "wis", "int", "cha"]
StatTypes = ["dexterity", "strength", "constitution", "wisdom", "intelligence", "charisma"]
NewLine   = "\n"

init = combat()

# ---------------
# | Arg Parsing |
# ---------------

args = argparse(&ARGS&)

totalDamage = 0
anno = {}

user = init.get_combatant(args.last('user', name))
name = user.name if user else name

# Misc
anno["n"]            = args.last("n",     "", str)
anno["ndesc"]        = args.last("ndesc", "", str)
anno["roll"]         = args.last("roll",  "", str)

# One Off
anno["dc"]           = args.last('dc',   "10", str)
crit                 = args.last('crit', False, bool)
save_type            = args.last('save', args.last('s', 'dex')).lower()[:3]

# General
anno["damage"]       = args.last('d',   '', str)
anno["maxhp"]        = args.last('max', '', str)
anno["temphp"]       = args.last('thp', '', str)
anno["save_bonus"]   = args.get('b')

# Flavour
anno["phrase"]       = args.join('phrase', NewLine, "")
anno["desc"]         = args.last('desc',  '', str)
anno["title"]        = args.last('title',  f'{name} wants you to make a {StatTypes[SaveTypes.index(save_type)].title()} Save!', str)

# We need this to be a dict for the annotating below
targetsCache         = {i:targ for i, targ in enumerate(args.get('t'))}

gAutoPass            = args.adv(custom={'adv': 'pass', 'dis': 'fail'})

# Clear out unused args
for arg in anno.copy():
 if not anno.get(arg):
  anno.pop(arg)

# ---------------------------
# | Annotate all the Things |
# ---------------------------

mathsep   = "+-()/*[]"
for annoGroup in [anno, targetsCache]:
 for key, string in annoGroup.items():
  # Get all parts enclosed in {braces}
  bracedSegments = [(part := part.split('{')[0])[:part.index('}')] for part in string.split('{') if '}' in part]
  stringOut = []
  # Iterate over each one
  for segment in bracedSegments:
   segOut = []
   # Separate out things in mathsep, with spaces
   sepSegment = "".join([(f" {char} " if char in mathsep else char) for char in segment]).split()
   # Iterate over each part
   for sep in sepSegment:
    # If its a number, or a math seperator, add it to the output unchanged
    if (sep.strip('-.').isdigit() or sep in mathsep):
     segOut.append(sep)
    # If a annotated exists, add that
    elif anno.get(sep) is not None:
     if typeof(anno.get(sep)) == "SimpleRollResult":
      segOut.append(str(anno.get(sep).total))
     else:
      segOut.append(str(anno.get(sep)))
    # If an -arg was provided with this name, add that
    elif args.last(sep) is not None:
     segOut.append(str(args.last(sep)))
    # If a variable exists, add that
    elif get(sep) is not None:
     segOut.append(str(get(sep)))
    # Otherwise add it unchanged
    else:
     segOut.append(sep)
   # Convert it to a string
   segOut = ''.join(segOut)
   # Roll and append (invalid roll() return 0)
   stringOut.append(roll(segOut) if segOut.strip('+-').isdigit() else roll(segOut) or segOut)
  # Replace the original string
  for i, origin in enumerate(bracedSegments):
   string = string.replace("{"+origin+"}", str(stringOut[i]))
  # Roll our rollables
  if key in ["damage", "maxhp", "temphp", "dc", "roll", "n"]:
   if key in ["dc", "n"]:
    annoGroup[key] =  roll(string)
   elif key in ["maxhp", "temphp", "roll", "damage"]:
    annoGroup[key] = vroll(string, 1 + (crit if key == "damage" else 0))
  else:
   annoGroup[key] = string

# ----------------------------------
# | Args part two elecric boogaloo |
# ----------------------------------

# Ignore Certain Args so we aren't reparsing them in the target loop
args.ignore('d')
args.ignore('max')
args.ignore('thp')
args.ignore('pass')
args.ignore('fail')

# ---------------
# | Consumables |
# ---------------

# Default to 'everything is fine'
valid           = True

consumeOut      = []
consumes        = {"cc": {}, "slot": {}, "item": {}}
invalidConsumes = {"cc": [], "slot": [], "item": []}

for counterNum in [""]+[str(x) for x in range(1,11)]:
 if cc := args.last('cc' + counterNum):
  ccUses = args.last('ccnum' + counterNum, 1, int)
  # Was it an exact match?
  if character().cc_exists(cc):
   cc = character().cc(cc)
  # Otherwise, loop through all counters and fuzzy search
  else:
   for counter in character().consumables:
    if cc.lower() in counter.name.lower():
     cc = counter
     break
   # If we got through the whole for loop with nothing, no matches
   else:
    cc = None
  # Did we find a valid counter? Add it to the consumes dic
  if cc:
   consumes["cc"].update({cc: consumes.get(cc.name, 0) - ccUses})

if not args.last('i'):
 # Make sure all counters won't be made out of bounds (need to add spell slots and items to this too)
 if all([1 if cc.min <= (cc.value - ccUses) <= cc.max else invalidConsumes["cc"].append(f"""**{cc.name}** ({ccUses:+}): {str(cc)}""") for cc, ccUses in consumes["cc"].items()]):
  # If everything was valid, go through and modify them all
  for counter, ccUses in consumes["cc"].items():
   cc.set(cc.value - ccUses)
   consumeOut.append(f""" -f "{cc.name} ({-ccUses:+})|{str(cc)}" """)
 # Otherwise, something would go out of bounds, cancel everything and inform the user
 else:
  consumeOut.append(f""" -f "Consumable out of Bounds|Unfortunately, one or more of your consumables would be put out of bounds by this action:
   {NewLine.join(invalidConsumes["cc"]) if invalidConsumes["cc"] else "" }" """)
  valid = False

# -------------------
# | Get Target Loop |
# -------------------

targets   = []
targetOut = []
for targ in targetsCache.values():
  targName, targArgs = (targ.split("|")+[""])[:2]
  targArgs = argparse(targArgs)
  if curTarg := init.get_combatant(targName):
   targets.append(curTarg)
   args.add_context(curTarg.name, targArgs)
  elif curTarg := init.get_group(targName):
   for gTarg in curTarg.combatants:
    targets.append(gTarg)
    args.add_context(gTarg.name, targArgs)

# --------------------
# | Main Target Loop |
# --------------------

for target in targets:
 tOut = []

 # Grab our specific targets arguments
 args.set_context(target.name)
 autoPass = args.adv(custom={'adv': 'pass', 'dis': 'fail'})

 # Figure out our entire damage string
 targDamage = anno["damage"].consolidated() if anno.get("damage") else ""
 if targD := args.get('d'):
  targDamage += "+" + "+".join(targD)

 # Figure out our entire max hp adjustment
 targMaxhp = anno["maxhp"].consolidated() if anno.get("maxhp") else ""
 if targM := args.get('max'):
  targMaxhp += "+" + "+".join(targM)

 # Figure out our entire temp hp adjustment
 targTemphp = anno["temphp"].consolidated() if anno.get("temphp") else ""
 if targT := args.get('thp'):
  targTemphp += "+" + "+".join(targT)

 # If we aren't automatically passing or failing
 if not (gAutoPass or autoPass):

  # Figure out all of our save bonuses
  save_bonus = anno.get("save_bonus", [])
  adv = args.adv(boolwise=True)
  for effect in target.effects:
   if (sb := effect.effect.get('sb')):
     save_bonus.append(sb)

  # Grab our save string and add our bonuses
  saveStr  = target.saves.get(save_type).d20(adv)
  saveStr += '+'.join(save_bonus).replace('+-', '-')

  # Roll the save and compare against the DC
  save     = vroll(saveStr)
  success  = save.total >= anno["dc"]

  tOut.append(f"""**{save_type.upper()} Save:** {save}; {["Failure", "Success"][success]}!""")
 elif gAutoPass:
  # Global flag (1 is true, -1 is false)
  success = gAutoPass == 1
 else:
  # Target flag (1 is true, -1 is false)
  success = autoPass == 1
  tOut.append(f"""**{save_type.upper()} Save:** Automatic {["Failure", "Success"][success]}!""")

 # If they failed, do things to them
 if not success:
  # Do we have damage? If so, apply it and add to total
  if targDamage:
   if args.last('avoid'):
    targDamage = f"""({targDamage})/2"""
   targDamage = target.damage(targDamage, crit)
   totalDamage += targDamage.total
   tOut.append(targDamage.damage)
  # Do we have a max hp adjustment? If so, apply it and add to total
  if targMaxhp:
   targMaxhp = vroll(targMaxhp)
   target.set_maxhp(target.max_hp + targMaxhp.total)
   # Was there a specific adjustment?
   if targMaxhp.total != anno.get("maxhp", {"total": None}).total:
    tOut.append(f"""**Max HP Roll:** {targMaxhp}""")
   tOut.append(f"""Max HP {["Decreased", "Increased", "Unchanged"][(targMaxhp.total>=0) + (targMaxhp==0)]}: `{targMaxhp.total:+}`""")
  # Do we have a max hp adjustment? If so, apply it and add to total
  if targTemphp:
   targTemphp = vroll(targTemphp)
   # Was there a specific adjustment?
   if targTemphp.total != anno.get("temphp", {"total": None}).total:
    tOut.append(f"""**Temp. HP Roll:** {targTemphp}""")
   if targTemphp.total > target.temp_hp:
    target.set_temp_hp(targTemphp.total)
    tOut.append(f"""Temp. HP Set: `{targTemphp.total}`""")
   else:
    tOut.append(f"""Temp. HP Unchanged: `{target.temp_hp}`""")
 else:
  # Do we have damage and half/avoid? If so, apply it and add to total
  if targDamage:
   if args.last('avoid'):
    targDamage = f"""({targDamage})*0"""
   elif args.last('half'):
    targDamage = f"""({targDamage})/2"""
   targDamage = target.damage(targDamage, crit)
   totalDamage += targDamage.total
   tOut.append(targDamage.damage)

 # Add our target output to the list
 targetOut.append(f""" -f "{target.name}|{NewLine.join(tOut) or "*None*"}|inline" """)

 # Reset our context
 args.set_context(None)

# ---------------
# | Meta Output |
# ---------------
metaOut = []
if valid:
 if anno.get("damage"):
  metaOut.append(f"""**Damage:** {anno["damage"]}""")
 if anno.get("maxhp"):
  metaOut.append(f"""**Max HP:** {anno["maxhp"]}""")
 if anno.get("temphp"):
  metaOut.append(f"""**Temp. HP:** {anno["temphp"]}""")
 if anno.get('n'):
  metaOut.append(f"""**{anno.get('ndesc', 'Number')}**: {anno.get('n')}""")
 if anno.get('roll'):
  metaOut.append(f"""**Roll**: {anno.get('roll')}""")
 metaOut.append(f"""**DC:** {anno["dc"]}""")
 metaOut.append(f"""{save_type.upper()} save""")
 # Join it together
 metaOut = f""" -f "Meta|{NewLine.join(metaOut)}" """
else:
 metaOut = ""

# ------------------
# | Flavour Output |
# ------------------
flavourOut   = ""
flavourOut  += f""" -title "{anno.get("title")}" """
if anno.get("desc"):
 flavourOut += f""" -f "Effect|{anno.get("desc")}" """
if anno.get("phrase"):
 flavourOut += f""" -desc "*{anno.get("phrase")}*" """

consumeOut = ' '.join(consumeOut)

return metaOut + NewLine.join(targetOut) + consumeOut + flavourOut + f""" -footer "{NewLine.join([str(targ) for targ in targets])}" """
</drac2>