embed

<drac2>

# =============================
# Variables
# =============================

duel    = int(get('arenaDuel', 0))
monster = int(get('arenaMonster', 0))
dm      = int(get('arenaDm', 0))
args    = "&*&".lower()

# Constants
HOUR = 3600
DAY  = 86_400
WEEK = 604_800

curTime = int(time())

# Calculate when the previous midnight in CST was
CSTMid = ((curTime//3600) - ((curTime//3600) % 24) - 18) * 3600

if (curTime - CSTMid) > DAY:
  CSTMid += DAY

# Defaults
duelTime    = (0, 0, 0)
monsterTime = (0, 0, 0, 0)
DMTime      = (0, 0, 0, 0)

duelOut     = "Available"
monsterOut  = "Available"
DMOut       = "Available"

newTimer    = 0

# =============================
# Duels
# =============================

# If a timer exists, calculate remaining time
if duel:
  duel = (duel + DAY - curTime)
  # Is the timer still running?
  if duel > 0:
    # Calculate human parseable times (Hours, Minutes, Seconds)
    duelTime = f"<t:{duel + curTime}:R>"
# If the timer is expired, and they called for it to be reset, do so
if duel <= 0 and 'duel' in args:
  character().set_cvar('arenaDuel', CSTMid)
  # Recalculate parseable timers
  duel = (CSTMid + DAY - curTime)
  duelTime = f"<t:{duel + curTime}:R>"
  newTimer = 1

# If the timer is running (or just set), lets parse it out to text
if duel > 0:
  duelOut = duelTime
  if newTimer == 1:
    duelOut += " **(New)**"

# =============================
# Monster Fights
# =============================

# If a timer exists, calculate remaining time
if monster:
  monster = (monster + WEEK - curTime)
  # Is the timer still running?
  if monster > 0:
    monsterTime = f"<t:{monster + curTime}:R>"
# If the timer is expired, and they called for it to be reset, do so
if monster <= 0 and 'monster' in args:
  character().set_cvar('arenaMonster', curTime)
  # Recalculate parseable timers
  monster = WEEK
  monsterTime = f"<t:{monster + curTime}:R>"
  newTimer = 2

# If the timer is running (or just set), lets parse it out to text
if monster > 0:
  monsterOut = monsterTime
  if newTimer == 2:
    monsterOut += " **(New)**"

# =============================
# DM Experience
# =============================

# If a timer exists, calculate remaining time
if dm:
  dm = (dm + WEEK - curTime)
  # Is the timer still running?
  if dm > 0:
    dmTime = f"<t:{dm + curTime}:R>"
# If the timer is expired, and they called for it to be reset, do so
if dm <= 0 and 'dm' in args:
  set_uvar('arenaDm', curTime)
  # Recalculate parseable timers
  dm = WEEK
  dmTime = f"<t:{dm + curTime}:R>"
  newTimer = 3

# If the timer is running (or just set), lets parse it out to text
if dm > 0:
  DMOut = dmTime
  if newTimer == 3:
    DMOut += " **(New)**"


# =============================
# Setup for viewing all timers
# =============================

arenaTimers = load_json(get('arenaTimers','{}'))
arenaTimers[name] = {"duel":    int(get('arenaDuel', 0)),
                     "monster": int(get('arenaMonster', 0))}
set_uvar('arenaTimers', dump_json(arenaTimers))
</drac2>

-f "Duel|{{duelOut}}|inline"

-f "Monster Fight|{{monsterOut}}|inline"

-f "DM Experience|{{DMOut}}|inline"

-footer "!arena duel - Set your duel timer
!arena monster - Set your monster fight timer
!arena dm - Set your DM Experience timer
!arena all - View all character timers"

-title "Arena Cooldowns for <name>"


{{"-t 20" if ctx.channel.id == 687863391083167793 and not newTimer else ""}}