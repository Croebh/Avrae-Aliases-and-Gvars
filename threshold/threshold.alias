embed 
{{defaults = "-dice 1d10 -rr 2 -over 9|1 -under 2|1".split()}}
{{args = argparse(get("defaults",[])+&ARGS&)}}


{{help = not args or "?" in args or "help" in args}}

{{Min = args.last("min", type_ = int)}}
{{Max = args.last("max", type_ = int)}}
{{dice = args.last("dice", "4d6kh3", str)}}
{{rr = args.last("rr", 1, int)}}
{{under = [x.split('|') for x in args.get("under", [], str)]}}
{{over = [x.split('|') for x in args.get("over", [], str)]}}
{{straight = 'straight' in args}}
{{stats = ["STR","DEX","CON","INT","WIS","CHA"]}}
{{helptxt = get_gvar("4f38edc0-b72d-4cd7-a786-987b014e0990")}}

<drac2>
a = []
tries = 0
ugh = []
while len(a) != rr:
  tries += 1
  diceRoll = [vroll(dice) for _ in range(6)]
  totals = [rol.total for rol in diceRoll]
  if Min and sum(totals)<Min:
    continue
  if Max and sum(totals)>Max:
    continue
  for underC in under:
    if len(underC)==2:
      if sum(i < int(underC[0]) for i in totals) >= int(underC[1]):
        continue
  a.append(diceRoll)
</drac2>

{{help or (' '.join([f'-f "Stats {f"#{x+1}" if len(a[:rr])>1 else ""}|' + '\n'.join([(f"**{stats[i]}:** "*straight)+str(a[x][i]) for i in range(len(a[x]))])+f"\n-----\nTotal =  `{sum([i.total for i in a[x]])}`"+'"' for x in range(len(a[:rr]))]) if len(a)>=rr else err('Not enough sets following the given rules.'))}}
-footer "!threshold help {{f"{tries=} | {ugh=}"}}"

-title "{{"Ugh, randchar spam" if help else "Generating random stats:"}}"

{{f'-desc "{helptxt}"' if help else '-desc "Ruling: '+((f"Minimum total of {Min}, " if Min else "")+(f"Maximum total of {Max}, " if Max else "")+(', '.join([f"Atleast {x[1]} over {x[0]}" for x in over]) if over else "")+', '+(', '.join([f"Atleast {x[1]} under {x[0]}" for x in under]) if under else "")).strip(' ,')+'"' if Min or Max or over or under else ""}}